// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ==============================================================

 `timescale 1ns/1ps


`define AUTOTB_DUT      needlemanWunsch
`define AUTOTB_DUT_INST AESL_inst_needlemanWunsch
`define AUTOTB_TOP      apatb_needlemanWunsch_top
`define AUTOTB_LAT_RESULT_FILE "needlemanWunsch.result.lat.rb"
`define AUTOTB_PER_RESULT_TRANS_FILE "needlemanWunsch.performance.result.transaction.xml"
`define AUTOTB_TOP_INST AESL_inst_apatb_needlemanWunsch_top
`define AUTOTB_MAX_ALLOW_LATENCY  15000000
`define AUTOTB_TRANSACTION_NUM  3
`define AUTOTB_CLOCK_PERIOD 5.000000
`define LENGTH_read_r 7
`define LENGTH_ref_genome 250000
`define LENGTH_ap_return 1

`define	AESL_BRAM_read_r AESL_autobram_read_r
`define	AESL_BRAM_INST_read_r bram_inst_read_r
`define   AESL_DEPTH_ref_genome 1
`define AUTOTB_TVIN_read_r  "../tv/cdatafile/c.needlemanWunsch.autotvin_read_r.dat"
`define AUTOTB_TVIN_ref_genome  "../tv/cdatafile/c.needlemanWunsch.autotvin_ref_genome.dat"
`define AUTOTB_TVIN_read_r_out_wrapc  "../tv/rtldatafile/rtl.needlemanWunsch.autotvin_read_r.dat"
`define AUTOTB_TVIN_ref_genome_out_wrapc  "../tv/rtldatafile/rtl.needlemanWunsch.autotvin_ref_genome.dat"
`define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.needlemanWunsch.autotvout_ap_return.dat"
`define AUTOTB_TVOUT_ap_return_out_wrapc  "../tv/rtldatafile/rtl.needlemanWunsch.autotvout_ap_return.dat"

module `AUTOTB_TOP;
task read_token;
    input integer fp;
    output reg [199 : 0] token;
    reg [7:0] c;
    reg intoken;
    reg done;
    begin
        token = "";
        intoken = 0;
        done = 0;
        while (!done) begin
            c = $fgetc(fp);
            if (c == 8'hff) begin   // EOF
                done = 1;
            end
            else if (c == " " || c == "\011" || c == "\012" || c == "\015") begin   // blank
                if (intoken) begin
                    done = 1;
                end
            end
            else begin              // valid character
                intoken = 1;
                token = (token << 8) | c;
            end
        end
    end
endtask

reg AESL_clock;
reg rst;
reg start;
reg ce;
reg continue;
wire AESL_start;
wire AESL_reset;
wire AESL_ce;
wire AESL_ready;
wire AESL_idle;
wire AESL_continue;
wire AESL_done;
reg AESL_done_delay = 0;
reg AESL_done_delay2 = 0;
reg AESL_ready_delay = 0;
wire ready;
wire ready_wire;
reg [31 : 0] AESL_mLatCnterIn [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterIn_addr;
reg [31 : 0] AESL_mLatCnterOut [0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [31 : 0] AESL_mLatCnterOut_addr ;
reg [31 : 0] AESL_clk_counter ;
reg [27 - 1 : 0] AESL_clk_ready[0 : `AUTOTB_TRANSACTION_NUM + 1];
reg [27 - 1 : 0] AESL_clk_done[0 : `AUTOTB_TRANSACTION_NUM + 1];

reg reported_stuck = 0;
reg reported_stuck_cnt = 0;
wire  s_axi_AXILiteS_AWVALID;
wire  s_axi_AXILiteS_AWREADY;
wire [4 : 0] s_axi_AXILiteS_AWADDR;
wire  s_axi_AXILiteS_WVALID;
wire  s_axi_AXILiteS_WREADY;
wire [31 : 0] s_axi_AXILiteS_WDATA;
wire [3 : 0] s_axi_AXILiteS_WSTRB;
wire  s_axi_AXILiteS_ARVALID;
wire  s_axi_AXILiteS_ARREADY;
wire [4 : 0] s_axi_AXILiteS_ARADDR;
wire  s_axi_AXILiteS_RVALID;
wire  s_axi_AXILiteS_RREADY;
wire [31 : 0] s_axi_AXILiteS_RDATA;
wire [1 : 0] s_axi_AXILiteS_RRESP;
wire  s_axi_AXILiteS_BVALID;
wire  s_axi_AXILiteS_BREADY;
wire [1 : 0] s_axi_AXILiteS_BRESP;
wire ap_clk;
wire ap_rst_n;
wire [31 : 0] read_r_Addr_A;
wire  read_r_EN_A;
wire [3 : 0] read_r_WEN_A;
wire [31 : 0] read_r_Din_A;
wire [31 : 0] read_r_Dout_A;
wire  read_r_Clk_A;
wire  read_r_Rst_A;
wire [7 : 0] ref_genome_TDATA;
wire  ref_genome_TVALID;
wire  ref_genome_TREADY;
wire  interrupt;
integer done_cnt = 0;
integer AESL_ready_cnt = 0;
integer ready_cnt = 0;
reg ready_initial;
reg ready_initial_n;
reg ready_last_n;
reg ready_delay_last_n;
reg done_delay_last_n;
reg interface_done = 0;
wire AXILiteS_read_data_finish;
wire AESL_slave_start;
wire AESL_slave_write_start_in;
wire AESL_slave_write_start_finish;
reg AESL_slave_ready;
wire AESL_slave_output_done;
reg ready_rise = 0;
reg start_rise = 0;
reg slave_start_status = 0;
reg slave_done_status = 0;

`AUTOTB_DUT `AUTOTB_DUT_INST(
.s_axi_AXILiteS_AWVALID(s_axi_AXILiteS_AWVALID),
.s_axi_AXILiteS_AWREADY(s_axi_AXILiteS_AWREADY),
.s_axi_AXILiteS_AWADDR(s_axi_AXILiteS_AWADDR),
.s_axi_AXILiteS_WVALID(s_axi_AXILiteS_WVALID),
.s_axi_AXILiteS_WREADY(s_axi_AXILiteS_WREADY),
.s_axi_AXILiteS_WDATA(s_axi_AXILiteS_WDATA),
.s_axi_AXILiteS_WSTRB(s_axi_AXILiteS_WSTRB),
.s_axi_AXILiteS_ARVALID(s_axi_AXILiteS_ARVALID),
.s_axi_AXILiteS_ARREADY(s_axi_AXILiteS_ARREADY),
.s_axi_AXILiteS_ARADDR(s_axi_AXILiteS_ARADDR),
.s_axi_AXILiteS_RVALID(s_axi_AXILiteS_RVALID),
.s_axi_AXILiteS_RREADY(s_axi_AXILiteS_RREADY),
.s_axi_AXILiteS_RDATA(s_axi_AXILiteS_RDATA),
.s_axi_AXILiteS_RRESP(s_axi_AXILiteS_RRESP),
.s_axi_AXILiteS_BVALID(s_axi_AXILiteS_BVALID),
.s_axi_AXILiteS_BREADY(s_axi_AXILiteS_BREADY),
.s_axi_AXILiteS_BRESP(s_axi_AXILiteS_BRESP),
.ap_clk(ap_clk),
.ap_rst_n(ap_rst_n),
.read_r_Addr_A(read_r_Addr_A),
.read_r_EN_A(read_r_EN_A),
.read_r_WEN_A(read_r_WEN_A),
.read_r_Din_A(read_r_Din_A),
.read_r_Dout_A(read_r_Dout_A),
.read_r_Clk_A(read_r_Clk_A),
.read_r_Rst_A(read_r_Rst_A),
.ref_genome_TDATA(ref_genome_TDATA),
.ref_genome_TVALID(ref_genome_TVALID),
.ref_genome_TREADY(ref_genome_TREADY),
.interrupt(interrupt)
);

// Assignment for control signal
  assign ap_clk = AESL_clock;
  assign ap_rst_n = AESL_reset;
  assign ap_rst_n_n = ~AESL_reset;
  assign AESL_reset = rst;
  assign AESL_start = start;
  assign AESL_ce = ce;
  assign AESL_continue = continue;
  assign AESL_slave_write_start_in = slave_start_status ;
  assign AESL_slave_start = AESL_slave_write_start_finish;
  assign AESL_done = slave_done_status  & AXILiteS_read_data_finish;

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        slave_start_status <= 1;
    end
    else begin
        if (AESL_start == 1 ) begin
            start_rise = 1;
        end
        if (start_rise == 1 && AESL_done == 1 ) begin
            slave_start_status <= 1;
        end
        if (AESL_slave_write_start_in == 1) begin 
            slave_start_status <= 0;
            start_rise = 0;
        end
    end
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
    begin
        AESL_slave_ready <= 0;
        ready_rise = 0;
    end
    else begin
        if (AESL_ready == 1 ) begin
            ready_rise = 1;
        end
        if (ready_rise == 1 && AESL_done_delay == 1 ) begin
            AESL_slave_ready <= 1;
        end
        if (AESL_slave_ready == 1) begin 
            AESL_slave_ready <= 0;
            ready_rise = 0;
        end
    end
end

always @ (posedge AESL_clock)
begin
    if (AESL_done == 1) begin
        slave_done_status <= 0;
    end
    else if (AESL_slave_output_done == 1 ) begin
        slave_done_status <= 1;
    end
end
//------------------------bramread_r Instantiation--------------

// The input and output of bramread_r
wire  bramread_r_Clk_A, bramread_r_Clk_B;
wire  bramread_r_EN_A, bramread_r_EN_B;
wire  [4 - 1 : 0] bramread_r_WEN_A, bramread_r_WEN_B;
wire    [31 : 0]	bramread_r_Addr_A, bramread_r_Addr_B;
wire	[31 : 0]	bramread_r_Din_A, bramread_r_Din_B;
wire    [31 : 0]	bramread_r_Dout_A, bramread_r_Dout_B;
wire	bramread_r_ready;
wire	bramread_r_done;

`AESL_BRAM_read_r `AESL_BRAM_INST_read_r(
    .Clk_A    (bramread_r_Clk_A),
    .Rst_A    (bramread_r_Rst_A),
    .EN_A     (bramread_r_EN_A),
    .WEN_A    (bramread_r_WEN_A),
    .Addr_A   (bramread_r_Addr_A),
    .Din_A    (bramread_r_Din_A),
    .Dout_A   (bramread_r_Dout_A),
    .Clk_B    (bramread_r_Clk_B),
    .Rst_B    (bramread_r_Rst_B),
    .EN_B     (bramread_r_EN_B),
    .WEN_B    (bramread_r_WEN_B),
    .Addr_B   (bramread_r_Addr_B),
    .Din_B    (bramread_r_Din_B),
    .Dout_B   (bramread_r_Dout_B),
    .ready	(bramread_r_ready),
    .done	    (bramread_r_done)
);

// Assignment between dut and bramread_r
assign bramread_r_Clk_A = read_r_Clk_A;
assign bramread_r_Rst_A = read_r_Rst_A;
assign bramread_r_Addr_A = read_r_Addr_A;
assign bramread_r_EN_A = read_r_EN_A;
assign read_r_Dout_A = bramread_r_Dout_A;
assign bramread_r_WEN_A = 0;
assign bramread_r_Din_A = 0;
assign bramread_r_ready=	ready;
assign bramread_r_done = 0;



integer ap_c_n_tvin_ref_genome_trans_num;
reg  ref_genome_ready_reg;
wire ref_genome_ready;
wire ref_genome_done;
wire axi_s_ref_genome_TVALID;
wire axi_s_ref_genome_TREADY;
  AESL_axi_s_ref_genome AESL_AXI_S_ref_genome(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_ref_genome_TDATA (ref_genome_TDATA),
    .TRAN_ref_genome_TVALID (axi_s_ref_genome_TVALID),
    .TRAN_ref_genome_TREADY (axi_s_ref_genome_TREADY),
    .ready (ref_genome_ready),
    .done  (ref_genome_done)
);
assign    ref_genome_ready   =   ready;
assign    ref_genome_done    =   0;

reg   reg_ref_genome_TVALID;
initial begin : gen_reg_ref_genome_TVALID_process
    integer rand;
    reg_ref_genome_TVALID = axi_s_ref_genome_TVALID;
    while(1)
    begin
        @(axi_s_ref_genome_TVALID);
        if(axi_s_ref_genome_TVALID === 1)
        begin
        end
        reg_ref_genome_TVALID = axi_s_ref_genome_TVALID;
    end
end

assign      ref_genome_TVALID    =   reg_ref_genome_TVALID;

assign      axi_s_ref_genome_TREADY    =   ref_genome_TREADY;


AESL_axi_slave_AXILiteS AESL_AXI_SLAVE_AXILiteS(
    .clk   (AESL_clock),
    .reset (AESL_reset),
    .TRAN_s_axi_AXILiteS_AWADDR (s_axi_AXILiteS_AWADDR),
    .TRAN_s_axi_AXILiteS_AWVALID (s_axi_AXILiteS_AWVALID),
    .TRAN_s_axi_AXILiteS_AWREADY (s_axi_AXILiteS_AWREADY),
    .TRAN_s_axi_AXILiteS_WVALID (s_axi_AXILiteS_WVALID),
    .TRAN_s_axi_AXILiteS_WREADY (s_axi_AXILiteS_WREADY),
    .TRAN_s_axi_AXILiteS_WDATA (s_axi_AXILiteS_WDATA),
    .TRAN_s_axi_AXILiteS_WSTRB (s_axi_AXILiteS_WSTRB),
    .TRAN_s_axi_AXILiteS_ARADDR (s_axi_AXILiteS_ARADDR),
    .TRAN_s_axi_AXILiteS_ARVALID (s_axi_AXILiteS_ARVALID),
    .TRAN_s_axi_AXILiteS_ARREADY (s_axi_AXILiteS_ARREADY),
    .TRAN_s_axi_AXILiteS_RVALID (s_axi_AXILiteS_RVALID),
    .TRAN_s_axi_AXILiteS_RREADY (s_axi_AXILiteS_RREADY),
    .TRAN_s_axi_AXILiteS_RDATA (s_axi_AXILiteS_RDATA),
    .TRAN_s_axi_AXILiteS_RRESP (s_axi_AXILiteS_RRESP),
    .TRAN_s_axi_AXILiteS_BVALID (s_axi_AXILiteS_BVALID),
    .TRAN_s_axi_AXILiteS_BREADY (s_axi_AXILiteS_BREADY),
    .TRAN_s_axi_AXILiteS_BRESP (s_axi_AXILiteS_BRESP),
    .TRAN_AXILiteS_read_data_finish(AXILiteS_read_data_finish),
    .TRAN_AXILiteS_ready_out (AESL_ready),
    .TRAN_AXILiteS_ready_in (AESL_slave_ready),
    .TRAN_AXILiteS_done_out (AESL_slave_output_done),
    .TRAN_AXILiteS_idle_out (AESL_idle),
    .TRAN_AXILiteS_write_start_in     (AESL_slave_write_start_in),
    .TRAN_AXILiteS_write_start_finish (AESL_slave_write_start_finish),
    .TRAN_AXILiteS_transaction_done_in (AESL_done_delay),
    .TRAN_AXILiteS_interrupt  (interrupt),
    .TRAN_AXILiteS_start_in  (AESL_slave_start)
);

// Write "[[[runtime]]]" and "[[[/runtime]]]" for output-only transactor 
initial begin : write_output_transactor_ap_return_runtime_process
    integer fp;
    fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc, "w");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[runtime]]]");
    $fclose(fp);
    wait(done_cnt == `AUTOTB_TRANSACTION_NUM)
	  repeat(2) @(posedge AESL_clock);
    # 0.2;
    fp = $fopen(`AUTOTB_TVOUT_ap_return_out_wrapc, "a");
    if(fp == 0) begin       // Failed to open file
        $display("Failed to open file \"%s\"!", `AUTOTB_TVOUT_ap_return_out_wrapc);
        $display("ERROR: Simulation using HLS TB failed.");
        $finish;
    end
    $fdisplay(fp,"[[[/runtime]]]");
    $fclose(fp);
end

initial begin : generate_AESL_ready_cnt_proc
    AESL_ready_cnt = 0;
    wait(AESL_reset === 1);
    while(AESL_ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        AESL_ready_cnt = AESL_ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_ready_cnt_proc
    ready_cnt = 0;
    wait(AESL_reset === 1);
    while(ready_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(ready !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        ready_cnt = ready_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
end

initial begin : generate_done_cnt_proc
    done_cnt = 0;
    wait(AESL_reset === 1);
    while(done_cnt != `AUTOTB_TRANSACTION_NUM) begin
        while(AESL_done !== 1) begin
            @(posedge AESL_clock);
            # 0.4;
        end
        @(negedge AESL_clock);
        done_cnt = done_cnt + 1;
        @(posedge AESL_clock);
        # 0.4;
    end
    @(posedge AESL_clock);
    # 0.4;
    $finish;
end

initial fork
    AESL_clock = 0;
    forever #(`AUTOTB_CLOCK_PERIOD/2) AESL_clock = ~AESL_clock;
join

initial begin : initial_process
    integer rand;
    rst = 0;
    # 100;
	  repeat(3) @(posedge AESL_clock);
    rst = 1;
end

initial begin : start_process
  integer rand;
  start = 0;
  ce = 1;
    wait(AESL_reset === 1);
  @(posedge AESL_clock);
  start <= 1;
  while(ready_cnt != `AUTOTB_TRANSACTION_NUM + 1) begin
      @(posedge AESL_clock);
      if(AESL_ready == 1) begin
          start <= 0;
          start <= 1;
      end
  end
  start <= 0;
end

always @(AESL_done)
begin
    continue = AESL_done;
end

initial begin : ready_initial_process
    ready_initial = 0;
    wait (AESL_start === 1);
    ready_initial = 1;
    @(posedge AESL_clock);
    ready_initial = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      AESL_ready_delay = 0;
  else
      AESL_ready_delay = AESL_ready;
end
initial begin : ready_last_n_process
  ready_last_n = 1;
  wait(ready_cnt == `AUTOTB_TRANSACTION_NUM)
  @(posedge AESL_clock);
  ready_last_n <= 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      ready_delay_last_n = 0;
  else
      ready_delay_last_n <= ready_last_n;
end
assign ready = (ready_initial | AESL_ready_delay);
assign ready_wire = ready_initial | AESL_ready_delay;
initial begin : done_delay_last_n_process
  done_delay_last_n = 1;
  while(done_cnt != `AUTOTB_TRANSACTION_NUM)
      @(posedge AESL_clock);
  # 0.1;
  done_delay_last_n = 0;
end

always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
  begin
      AESL_done_delay <= 0;
      AESL_done_delay2 <= 0;
  end
  else begin
      AESL_done_delay <= AESL_done & done_delay_last_n;
      AESL_done_delay2 <= AESL_done_delay;
  end
end
always @(posedge AESL_clock)
begin
    if(AESL_reset === 0)
      interface_done = 0;
  else begin
      # 0.01;
      if(ready === 1 && ready_cnt > 0 && ready_cnt < `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else if(AESL_done_delay === 1 && done_cnt == `AUTOTB_TRANSACTION_NUM)
          interface_done = 1;
      else
          interface_done = 0;
  end
end
initial begin : proc_gen_ref_genome_internal_ready
    integer internal_trans_num;
    wait(AESL_reset === 1);
    wait(ready_initial === 1);
    ref_genome_ready_reg <= 0;
    @(posedge AESL_clock);
    internal_trans_num = 1;
    while(internal_trans_num != `AUTOTB_TRANSACTION_NUM + 1) begin
      if (1
          && ap_c_n_tvin_ref_genome_trans_num > internal_trans_num
      ) begin
            ref_genome_ready_reg <= 1;
            @(posedge AESL_clock);
            ref_genome_ready_reg <= 0;
            internal_trans_num = internal_trans_num + 1;
        end
        else begin
            @(posedge AESL_clock);
        end
    end
    ref_genome_ready_reg <= 0;
end
initial begin : proc_ap_c_n_tvin_ref_genome_trans_num
    integer i;
    integer fp;
    integer ret;
    integer size;
    reg [127 : 0] token;
    fp = $fopen(`AUTOTB_TVIN_ref_genome,"r");
    if(fp == 0) begin       // Failed to open file
	      $display("Failed to open file \"%s\"!", `AUTOTB_TVIN_ref_genome);
        $display("ERROR: Simulation using HLS TB failed.");
	      $finish;
    end
    read_token(fp, token);
    if (token != "[[[runtime]]]") begin             // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
	      $finish;
    end
    read_token(fp, token);
    @(posedge AESL_clock);
    ap_c_n_tvin_ref_genome_trans_num = 1;
    while(token != "[[[/runtime]]]") begin
        i = 0;
        if (token != "[[transaction]]") begin             // Illegal format
            $display("ERROR: Simulation using HLS TB failed.");
	          $finish;
        end
        read_token(fp, token);     // skip transaction number
        read_token(fp, token);
        #0.5;
        while (token != "[[/transaction]]") begin
            if (ref_genome_TREADY == 1) begin 
               read_token(fp, token);
               i = i + 1;
           end 
           if (token != "[[/transaction]]") begin
               @(posedge AESL_clock);
               #0.5;
           end 
       end 
        read_token(fp, token);
        ap_c_n_tvin_ref_genome_trans_num = ap_c_n_tvin_ref_genome_trans_num + 1;
        if (i != 0) begin
            @(posedge AESL_clock);
        end 
    end
    if (token != "[[[/runtime]]]") begin             // Illegal format
        $display("ERROR: Simulation using HLS TB failed.");
	      $finish;
    end
    @(posedge AESL_clock);
    $fclose(fp);
end

always @ (negedge AESL_clock) begin
    if(AESL_reset === 0)
    begin
        AESL_clk_counter <= 0;
    end 
    else begin
        AESL_clk_counter = AESL_clk_counter + 1;
    end    
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterOut_addr = 0;
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter + 1;
        reported_stuck_cnt <= 0;
    end
    else if (AESL_done && AESL_mLatCnterOut_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterOut[AESL_mLatCnterOut_addr] = AESL_clk_counter;
        AESL_mLatCnterOut_addr = AESL_mLatCnterOut_addr + 1;
        reported_stuck <= 0;
    end
end

always @ (posedge AESL_clock or negedge AESL_reset) begin
    if(AESL_reset === 0)
    begin
        AESL_mLatCnterIn_addr = 0;
    end
    else if (AESL_slave_write_start_finish && AESL_mLatCnterIn_addr < `AUTOTB_TRANSACTION_NUM + 1) begin
        AESL_mLatCnterIn[AESL_mLatCnterIn_addr] = AESL_clk_counter;
        AESL_mLatCnterIn_addr = AESL_mLatCnterIn_addr + 1;
    end
end

initial begin : performance_check
	integer transaction_counter;
	integer i;
	integer fp;

	integer latthistime;
	integer lattotal;
	integer latmax;
	integer latmin;


	integer thrthistime;
	integer thrtotal;
	integer thrmax;
	integer thrmin;

	integer lataver;
	integer thraver;
	reg [31 : 0] lat_array [0 : `AUTOTB_TRANSACTION_NUM];
	reg [31 : 0] thr_array [0 : `AUTOTB_TRANSACTION_NUM];


	i = 0;
	lattotal = 0;
	latmax = 0;
	latmin = 32'h 7fffffff;
	lataver = 0;

	thrtotal = 0;
	thrmax = 0;
	thrmin = 32'h 7fffffff;
	thraver = 0;

	@(negedge AESL_clock);
	@(posedge AESL_reset);
	while (done_cnt != `AUTOTB_TRANSACTION_NUM) begin
		@(posedge AESL_clock);
	end

	#0.001

	if (AESL_mLatCnterIn_addr == 0) begin
		latmax  = 0;
		latmin  = 0;
		lataver = 0;
		thrmax  = 0;
		thrmin  = 0;
		thraver = 0;
		lat_array[0] = 0;
		thr_array[0] = 0;
	end else if (AESL_mLatCnterOut_addr == 1 || AESL_mLatCnterOut_addr == 0 ) begin
		latmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		latmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lataver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmax  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thrmin  = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		thraver = AESL_mLatCnterOut[0] - AESL_mLatCnterIn[0];
		lat_array[0] = lataver;
		thr_array[0] = thraver;
	end else begin
		// LATENCY
		for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
			latthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i];
			lattotal = lattotal + latthistime;
			lat_array[i] = latthistime;
			if (latthistime > latmax) latmax = latthistime;
			if (latthistime < latmin) latmin = latthistime;
		end
		// II
		for (i = 0; i < AESL_mLatCnterIn_addr - 1; i = i + 1) begin
			thrthistime = AESL_mLatCnterOut[i] - AESL_mLatCnterIn[i] ;
			thrtotal = thrtotal + thrthistime;
			thr_array[i] = thrthistime;
			if (thrthistime > thrmax) thrmax = thrthistime;
			if (thrthistime < thrmin) thrmin = thrthistime;
		end

		thr_array[AESL_mLatCnterIn_addr - 1] = 0;
		lataver = lattotal / (AESL_mLatCnterOut_addr);
		thraver = thrtotal / (AESL_mLatCnterIn_addr - 1);
	end

	fp = $fopen(`AUTOTB_LAT_RESULT_FILE, "w");

	$fdisplay(fp, "$MAX_LATENCY = \"%0d\"", latmax);
	$fdisplay(fp, "$MIN_LATENCY = \"%0d\"", latmin);
	$fdisplay(fp, "$AVER_LATENCY = \"%0d\"", lataver);
	$fdisplay(fp, "$MAX_THROUGHPUT = \"%0d\"", latmax);
	$fdisplay(fp, "$MIN_THROUGHPUT = \"%0d\"", latmin);
	$fdisplay(fp, "$AVER_THROUGHPUT = \"%0d\"", lataver);
	$fclose(fp);
	fp = $fopen(`AUTOTB_PER_RESULT_TRANS_FILE, "w");
	$fdisplay(fp, "%20s%16s%16s", "", "latency", "interval");
	for (i = 0; i < AESL_mLatCnterOut_addr; i = i + 1) begin
		$fdisplay(fp, "transaction%8d:%16d%16d", i, lat_array[i], thr_array[i]);
	end

	$fclose(fp);
end
endmodule
