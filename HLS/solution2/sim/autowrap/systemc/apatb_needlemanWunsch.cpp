// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;

// apint = uint2
#define uint2 char
// apint = uint20
#define uint20 int

// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "read_r"
#define AUTOTB_TVIN_read_r  "../tv/cdatafile/c.needlemanWunsch.autotvin_read_r.dat"
// wrapc file define: "ref_genome"
#define AUTOTB_TVIN_ref_genome  "../tv/cdatafile/c.needlemanWunsch.autotvin_ref_genome.dat"
// wrapc file define: "ap_return"
#define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.needlemanWunsch.autotvout_ap_return.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "ap_return"
#define AUTOTB_TVOUT_PC_ap_return  "../tv/rtldatafile/rtl.needlemanWunsch.autotvout_ap_return.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			read_r_depth = 0;
			ref_genome_depth = 0;
			ap_return_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{read_r " << read_r_depth << "}\n";
			total_list << "{ref_genome " << ref_genome_depth << "}\n";
			total_list << "{ap_return " << ap_return_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int read_r_depth;
		int ref_genome_depth;
		int ap_return_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C"  uint20 needlemanWunsch ( uint2 read[100],  uint2 ref_genome[1000000]);

#define needlemanWunsch AESL_ORIG_DUT_needlemanWunsch
extern "C"  uint20 needlemanWunsch ( uint2 read[100],  uint2 ref_genome[1000000]);
#undef needlemanWunsch

 uint20 needlemanWunsch ( uint2 read[100],  uint2 ref_genome[1000000])
{
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		 uint20 AESL_return;

		// output port post check: "ap_return"
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data

			sc_bv<20> ap_return_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					ap_return_pc_buffer = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_ap_return))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: ap_return
				{
					// bitslice(19, 0)
					// {
						// celement: return(19, 0)
						// {
							sc_lv<20> return_lv0_0_1_0;
						// }
					// }

					// bitslice(19, 0)
					{
						// celement: return(19, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									return_lv0_0_1_0.range(19, 0) = sc_bv<20>(ap_return_pc_buffer.range(19, 0));
								}
							}
						}
					}

					// bitslice(19, 0)
					{
						// celement: return(19, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									AESL_return = (return_lv0_0_1_0).to_uint64();
								}
							}
						}
					}
				}
			}
		}

		AESL_transaction_pc++;

		return AESL_return;
	}
	else
	{
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "read_r"
		char* tvin_read_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_read_r);

		// "ref_genome"
		char* tvin_ref_genome = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_ref_genome);

		// "ap_return"
		char* tvout_ap_return = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_ap_return);

		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_read_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_read_r, tvin_read_r);

		sc_bv<32>* read_r_tvin_wrapc_buffer = new sc_bv<32>[7];

		// RTL Name: read_r
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (0) => (96) @ (16)
					for (int i_0 = 0; i_0 <= 96; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(1, 0) = read_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(3, 2)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (1) => (97) @ (16)
					for (int i_0 = 1; i_0 <= 97; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(3, 2) = read_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(5, 4)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (2) => (98) @ (16)
					for (int i_0 = 2; i_0 <= 98; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(5, 4) = read_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(7, 6)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (3) => (99) @ (16)
					for (int i_0 = 3; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(7, 6) = read_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(9, 8)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (4) => (99) @ (16)
					for (int i_0 = 4; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(9, 8) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(11, 10)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (5) => (99) @ (16)
					for (int i_0 = 5; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(11, 10) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(13, 12)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (6) => (99) @ (16)
					for (int i_0 = 6; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(13, 12) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(15, 14)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (7) => (99) @ (16)
					for (int i_0 = 7; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(15, 14) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(17, 16)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (8) => (99) @ (16)
					for (int i_0 = 8; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(17, 16) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(19, 18)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (9) => (99) @ (16)
					for (int i_0 = 9; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(19, 18) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(21, 20)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (10) => (99) @ (16)
					for (int i_0 = 10; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(21, 20) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(23, 22)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (11) => (99) @ (16)
					for (int i_0 = 11; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(23, 22) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(25, 24)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (12) => (99) @ (16)
					for (int i_0 = 12; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(25, 24) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(27, 26)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (13) => (99) @ (16)
					for (int i_0 = 13; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(27, 26) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(29, 28)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (14) => (99) @ (16)
					for (int i_0 = 14; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(29, 28) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
			// bitslice(31, 30)
			{
				int hls_map_index = 0;
				// celement: read(1, 0)
				{
					// carray: (15) => (99) @ (16)
					for (int i_0 = 15; i_0 <= 99; i_0 += 16)
					{
						if (&(read[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> read_tmp_mem;
							read_tmp_mem = read[i_0];
							read_r_tvin_wrapc_buffer[hls_map_index++].range(31, 30) = read_tmp_mem.range(1, 0);
						}
					}
				}
				// dummy celement: (1, 0)
				{
					hls_map_index += 1;
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 7; i++)
		{
			sprintf(tvin_read_r, "%s\n", (read_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_read_r, tvin_read_r);
		}

		tcl_file.set_num(7, &tcl_file.read_r_depth);
		sprintf(tvin_read_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_read_r, tvin_read_r);

		// release memory allocation
		delete [] read_r_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_ref_genome, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_ref_genome, tvin_ref_genome);

		sc_bv<8>* ref_genome_tvin_wrapc_buffer = new sc_bv<8>[250000];

		// RTL Name: ref_genome
		{
			// bitslice(1, 0)
			{
				int hls_map_index = 0;
				// celement: ref_genome(1, 0)
				{
					// carray: (0) => (999996) @ (4)
					for (int i_0 = 0; i_0 <= 999996; i_0 += 4)
					{
						if (&(ref_genome[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> ref_genome_tmp_mem;
							ref_genome_tmp_mem = ref_genome[i_0];
							ref_genome_tvin_wrapc_buffer[hls_map_index++].range(1, 0) = ref_genome_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(3, 2)
			{
				int hls_map_index = 0;
				// celement: ref_genome(1, 0)
				{
					// carray: (1) => (999997) @ (4)
					for (int i_0 = 1; i_0 <= 999997; i_0 += 4)
					{
						if (&(ref_genome[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> ref_genome_tmp_mem;
							ref_genome_tmp_mem = ref_genome[i_0];
							ref_genome_tvin_wrapc_buffer[hls_map_index++].range(3, 2) = ref_genome_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(5, 4)
			{
				int hls_map_index = 0;
				// celement: ref_genome(1, 0)
				{
					// carray: (2) => (999998) @ (4)
					for (int i_0 = 2; i_0 <= 999998; i_0 += 4)
					{
						if (&(ref_genome[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> ref_genome_tmp_mem;
							ref_genome_tmp_mem = ref_genome[i_0];
							ref_genome_tvin_wrapc_buffer[hls_map_index++].range(5, 4) = ref_genome_tmp_mem.range(1, 0);
						}
					}
				}
			}
			// bitslice(7, 6)
			{
				int hls_map_index = 0;
				// celement: ref_genome(1, 0)
				{
					// carray: (3) => (999999) @ (4)
					for (int i_0 = 3; i_0 <= 999999; i_0 += 4)
					{
						if (&(ref_genome[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<2> ref_genome_tmp_mem;
							ref_genome_tmp_mem = ref_genome[i_0];
							ref_genome_tvin_wrapc_buffer[hls_map_index++].range(7, 6) = ref_genome_tmp_mem.range(1, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 250000; i++)
		{
			sprintf(tvin_ref_genome, "%s\n", (ref_genome_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_ref_genome, tvin_ref_genome);
		}

		tcl_file.set_num(250000, &tcl_file.ref_genome_depth);
		sprintf(tvin_ref_genome, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_ref_genome, tvin_ref_genome);

		// release memory allocation
		delete [] ref_genome_tvin_wrapc_buffer;

// [call_c_dut] ---------->

		 uint20 AESL_return = AESL_ORIG_DUT_needlemanWunsch(read, ref_genome);


		// [[transaction]]
		sprintf(tvout_ap_return, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		sc_bv<20> ap_return_tvout_wrapc_buffer;

		// RTL Name: ap_return
		{
			// bitslice(19, 0)
			{
				// celement: return(19, 0)
				{
					// carray: (0) => (1) @ (0)
					{
						if (&(AESL_return) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<20> return_tmp_mem;
							return_tmp_mem = AESL_return;
							ap_return_tvout_wrapc_buffer.range(19, 0) = return_tmp_mem.range(19, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_ap_return, "%s\n", (ap_return_tvout_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);
		}

		tcl_file.set_num(1, &tcl_file.ap_return_depth);
		sprintf(tvout_ap_return, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		// release memory allocation: "read_r"
		delete [] tvin_read_r;
		// release memory allocation: "ref_genome"
		delete [] tvin_ref_genome;
		// release memory allocation: "ap_return"
		delete [] tvout_ap_return;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

		return AESL_return;
	}
}


// apint = uint2
#undef uint2

// apint = uint20
#undef uint20
