-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needlemanWunsch is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reads_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    reads_ce0 : OUT STD_LOGIC;
    reads_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ref_genome : IN STD_LOGIC_VECTOR (7 downto 0);
    orig_in_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    orig_in_ce0 : OUT STD_LOGIC;
    orig_in_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    orig_out_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    orig_out_ce0 : OUT STD_LOGIC;
    orig_out_we0 : OUT STD_LOGIC;
    orig_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    orig_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    score_in_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    score_in_ce0 : OUT STD_LOGIC;
    score_in_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    score_in_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
    score_in_ce1 : OUT STD_LOGIC;
    score_in_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    score_out_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    score_out_ce0 : OUT STD_LOGIC;
    score_out_we0 : OUT STD_LOGIC;
    score_out_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    score_out_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    i : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of needlemanWunsch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "needlemanWunsch,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.513750,HLS_SYN_LAT=210,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=181,HLS_SYN_LUT=239}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_pp0_stg0_fsm_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_pp0_stg1_fsm_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_st9_fsm_3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_st10_fsm_4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_st11_fsm_5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_st12_fsm_6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_st13_fsm_7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFFFFF9C : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110011100";
    constant ap_const_lv7_65 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_24 : BOOLEAN;
    signal max_orig : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal max_score : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal j_reg_220 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg1_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal or_cond_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_reg_487 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal tmp_4_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_409 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_409_pp0_it1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_4_reg_409_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reads_load_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_272_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_1_reg_427 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_5_reg_437_pp0_it2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal diag_score_fu_302_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal diag_score_reg_463 : STD_LOGIC_VECTOR (8 downto 0);
    signal up_score_fu_308_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal up_score_reg_471 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_176 : BOOLEAN;
    signal score_out_load_reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_184 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal tmp_2_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_phi_fu_224_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal score_out_addr_4_gep_fu_141_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal score_out_addr_3_gep_fu_149_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal orig_out_addr_4_gep_fu_185_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal orig_out_addr_2_gep_fu_194_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st12_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_238 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal tmp_1_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_359_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_261_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal diag_cast_fu_287_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal diag_score_0_v_cast_cast_fu_295_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal up_cast_fu_291_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal left_cast_fu_314_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal left_score_fu_318_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_bdd_164 : BOOLEAN;
    signal ap_sig_bdd_213 : BOOLEAN;
    signal ap_sig_bdd_216 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = exitcond_fu_255_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_lv1_0 = exitcond_reg_405))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((ap_const_lv1_0 = exitcond_reg_405))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- j_reg_220 assign process. --
    j_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_reg_405))) then 
                j_reg_220 <= j_1_reg_427;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                j_reg_220 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    -- max_orig assign process. --
    max_orig_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_6)) then 
                max_orig <= orig_out_q0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_237_p2)))) then 
                max_orig <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- max_score assign process. --
    max_score_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) and not((ap_const_lv1_0 = tmp_2_fu_375_p2)))) then 
                max_score <= tmp_1_fu_368_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)) and not((ap_const_lv1_0 = tmp_fu_237_p2)))) then 
                max_score <= ap_const_lv32_FFFFFF9C;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1)) then
                    ap_reg_ppstg_tmp_4_reg_409_pp0_it1(6 downto 0) <= tmp_4_reg_409(6 downto 0);
                    ap_reg_ppstg_tmp_4_reg_409_pp0_it2(6 downto 0) <= ap_reg_ppstg_tmp_4_reg_409_pp0_it1(6 downto 0);
                    ap_reg_ppstg_tmp_5_reg_437_pp0_it2(6 downto 0) <= tmp_5_reg_437(6 downto 0);
                exitcond_reg_405 <= exitcond_fu_255_p2;
                or_cond_reg_478 <= or_cond_fu_333_p2;
                    tmp_5_reg_437(6 downto 0) <= tmp_5_fu_278_p1(6 downto 0);
                tmp_6_reg_453 <= tmp_6_fu_283_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2)) then
                diag_score_reg_463 <= diag_score_fu_302_p2;
                up_score_reg_471 <= up_score_fu_308_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_reg_405))) then
                j_1_reg_427 <= j_1_fu_272_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)))) then
                or_cond1_reg_487 <= or_cond1_fu_353_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_lv1_0 = exitcond_reg_405))) then
                reads_load_reg_422 <= reads_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (or_cond_reg_478 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and not((or_cond_reg_478 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond1_reg_487))))) then
                reg_232 <= orig_in_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_4)) then
                score_out_load_reg_506 <= score_out_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_fu_255_p2))) then
                    tmp_4_reg_409(6 downto 0) <= tmp_4_fu_267_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_4_reg_409(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_409_pp0_it1(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_4_reg_409_pp0_it2(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_437(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_5_reg_437_pp0_it2(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, exitcond_fu_255_p2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it3, tmp_2_fu_375_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_pp0_stg0_fsm_1 => 
                if ((not(((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_255_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_2;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_fu_255_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_3;
                end if;
            when ap_ST_pp0_stg1_fsm_2 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_1;
            when ap_ST_st9_fsm_3 => 
                ap_NS_fsm <= ap_ST_st10_fsm_4;
            when ap_ST_st10_fsm_4 => 
                ap_NS_fsm <= ap_ST_st11_fsm_5;
            when ap_ST_st11_fsm_5 => 
                if ((ap_const_lv1_0 = tmp_2_fu_375_p2)) then
                    ap_NS_fsm <= ap_ST_st13_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_6;
                end if;
            when ap_ST_st12_fsm_6 => 
                ap_NS_fsm <= ap_ST_st13_fsm_7;
            when ap_ST_st13_fsm_7 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st13_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_7)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st13_fsm_7)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_orig;

    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_112 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_164 assign process. --
    ap_sig_bdd_164_assign_proc : process(or_cond_fu_333_p2, or_cond1_fu_353_p2)
    begin
                ap_sig_bdd_164 <= (not((ap_const_lv1_0 = or_cond_fu_333_p2)) and not((ap_const_lv1_0 = or_cond1_fu_353_p2)));
    end process;


    -- ap_sig_bdd_176 assign process. --
    ap_sig_bdd_176_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_176 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_184 assign process. --
    ap_sig_bdd_184_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_184 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_193 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_213 assign process. --
    ap_sig_bdd_213_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
                ap_sig_bdd_213 <= ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1));
    end process;


    -- ap_sig_bdd_216 assign process. --
    ap_sig_bdd_216_assign_proc : process(or_cond_fu_333_p2, or_cond1_fu_353_p2)
    begin
                ap_sig_bdd_216 <= (not((ap_const_lv1_0 = or_cond_fu_333_p2)) and (ap_const_lv1_0 = or_cond1_fu_353_p2));
    end process;


    -- ap_sig_bdd_238 assign process. --
    ap_sig_bdd_238_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_238 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_24 assign process. --
    ap_sig_bdd_24_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_24 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_81 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_1 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_1_assign_proc : process(ap_sig_bdd_112)
    begin
        if (ap_sig_bdd_112) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp0_stg1_fsm_2 assign process. --
    ap_sig_cseq_ST_pp0_stg1_fsm_2_assign_proc : process(ap_sig_bdd_81)
    begin
        if (ap_sig_bdd_81) then 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg1_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st10_fsm_4 assign process. --
    ap_sig_cseq_ST_st10_fsm_4_assign_proc : process(ap_sig_bdd_184)
    begin
        if (ap_sig_bdd_184) then 
            ap_sig_cseq_ST_st10_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_5 assign process. --
    ap_sig_cseq_ST_st11_fsm_5_assign_proc : process(ap_sig_bdd_193)
    begin
        if (ap_sig_bdd_193) then 
            ap_sig_cseq_ST_st11_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_6 assign process. --
    ap_sig_cseq_ST_st12_fsm_6_assign_proc : process(ap_sig_bdd_238)
    begin
        if (ap_sig_bdd_238) then 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_7 assign process. --
    ap_sig_cseq_ST_st13_fsm_7_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st13_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_24)
    begin
        if (ap_sig_bdd_24) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_3 assign process. --
    ap_sig_cseq_ST_st9_fsm_3_assign_proc : process(ap_sig_bdd_176)
    begin
        if (ap_sig_bdd_176) then 
            ap_sig_cseq_ST_st9_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

        diag_cast_fu_287_p1 <= std_logic_vector(resize(signed(score_in_q0),9));

    diag_score_0_v_cast_cast_fu_295_p3 <= 
        ap_const_lv9_1 when (tmp_6_reg_453(0) = '1') else 
        ap_const_lv9_1FF;
    diag_score_fu_302_p2 <= std_logic_vector(signed(diag_cast_fu_287_p1) + signed(diag_score_0_v_cast_cast_fu_295_p3));
    exitcond_fu_255_p2 <= "1" when (j_phi_fu_224_p4 = ap_const_lv7_65) else "0";
    j_1_fu_272_p2 <= std_logic_vector(unsigned(j_reg_220) + unsigned(ap_const_lv7_1));

    -- j_phi_fu_224_p4 assign process. --
    j_phi_fu_224_p4_assign_proc : process(j_reg_220, ap_reg_ppiten_pp0_it1, exitcond_reg_405, ap_sig_cseq_ST_pp0_stg0_fsm_1, j_1_reg_427)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = exitcond_reg_405))) then 
            j_phi_fu_224_p4 <= j_1_reg_427;
        else 
            j_phi_fu_224_p4 <= j_reg_220;
        end if; 
    end process;

        left_cast_fu_314_p1 <= std_logic_vector(resize(signed(score_out_q0),9));

    left_score_fu_318_p2 <= std_logic_vector(signed(left_cast_fu_314_p1) + signed(ap_const_lv9_1FF));
    or_cond1_fu_353_p2 <= (tmp_9_fu_343_p2 or tmp_s_fu_348_p2);
    or_cond_fu_333_p2 <= (tmp_7_fu_324_p2 or tmp_8_fu_329_p2);

    -- orig_in_address0 assign process. --
    orig_in_address0_assign_proc : process(ap_reg_ppstg_tmp_4_reg_409_pp0_it1, tmp_5_reg_437, or_cond_fu_333_p2, ap_sig_bdd_164, ap_sig_bdd_213)
    begin
        if (ap_sig_bdd_213) then
            if (ap_sig_bdd_164) then 
                orig_in_address0 <= tmp_5_reg_437(7 - 1 downto 0);
            elsif ((ap_const_lv1_0 = or_cond_fu_333_p2)) then 
                orig_in_address0 <= ap_reg_ppstg_tmp_4_reg_409_pp0_it1(7 - 1 downto 0);
            else 
                orig_in_address0 <= "XXXXXXX";
            end if;
        else 
            orig_in_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- orig_in_ce0 assign process. --
    orig_in_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond_fu_333_p2, or_cond1_fu_353_p2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = or_cond_fu_333_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and not((ap_const_lv1_0 = or_cond1_fu_353_p2))))) then 
            orig_in_ce0 <= ap_const_logic_1;
        else 
            orig_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    orig_out_addr_2_gep_fu_194_p3 <= ap_reg_ppstg_tmp_5_reg_437_pp0_it2(7 - 1 downto 0);
    orig_out_addr_4_gep_fu_185_p3 <= ap_reg_ppstg_tmp_5_reg_437_pp0_it2(7 - 1 downto 0);

    -- orig_out_address0 assign process. --
    orig_out_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it2, or_cond_reg_478, or_cond1_reg_487, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it3, ap_reg_ppstg_tmp_4_reg_409_pp0_it2, ap_reg_ppstg_tmp_5_reg_437_pp0_it2, ap_sig_cseq_ST_st11_fsm_5, orig_out_addr_4_gep_fu_185_p3, orig_out_addr_2_gep_fu_194_p3)
    begin
        if ((not((or_cond_reg_478 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond1_reg_487)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            orig_out_address0 <= orig_out_addr_2_gep_fu_194_p3;
        elsif ((not((or_cond_reg_478 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond1_reg_487) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            orig_out_address0 <= orig_out_addr_4_gep_fu_185_p3;
        elsif (((or_cond_reg_478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            orig_out_address0 <= ap_reg_ppstg_tmp_5_reg_437_pp0_it2(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5)) then 
            orig_out_address0 <= ap_const_lv64_64(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) then 
            orig_out_address0 <= ap_reg_ppstg_tmp_4_reg_409_pp0_it2(7 - 1 downto 0);
        else 
            orig_out_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- orig_out_ce0 assign process. --
    orig_out_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it2, or_cond_reg_478, or_cond1_reg_487, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it3, ap_sig_cseq_ST_st11_fsm_5)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_5) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) or ((or_cond_reg_478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (not((or_cond_reg_478 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond1_reg_487) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (not((or_cond_reg_478 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond1_reg_487)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
            orig_out_ce0 <= ap_const_logic_1;
        else 
            orig_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- orig_out_d0 assign process. --
    orig_out_d0_assign_proc : process(orig_out_q0, reg_232, or_cond_reg_478, or_cond1_reg_487, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it3)
    begin
        if ((not((or_cond_reg_478 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond1_reg_487) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            orig_out_d0 <= orig_out_q0;
        elsif ((((or_cond_reg_478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (not((or_cond_reg_478 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond1_reg_487)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
            orig_out_d0 <= reg_232;
        else 
            orig_out_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- orig_out_we0 assign process. --
    orig_out_we0_assign_proc : process(or_cond_reg_478, or_cond1_reg_487, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppiten_pp0_it3)
    begin
        if ((((or_cond_reg_478 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (not((or_cond_reg_478 = ap_const_lv1_0)) and (ap_const_lv1_0 = or_cond1_reg_487) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)) or (not((or_cond_reg_478 = ap_const_lv1_0)) and not((ap_const_lv1_0 = or_cond1_reg_487)) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3)))) then 
            orig_out_we0 <= ap_const_logic_1;
        else 
            orig_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    reads_address0 <= tmp_4_fu_267_p1(7 - 1 downto 0);

    -- reads_ce0 assign process. --
    reads_ce0_assign_proc : process(ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            reads_ce0 <= ap_const_logic_1;
        else 
            reads_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    score_in_address0 <= tmp_4_reg_409(7 - 1 downto 0);
    score_in_address1 <= tmp_5_fu_278_p1(7 - 1 downto 0);

    -- score_in_ce0 assign process. --
    score_in_ce0_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            score_in_ce0 <= ap_const_logic_1;
        else 
            score_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- score_in_ce1 assign process. --
    score_in_ce1_assign_proc : process(ap_reg_ppiten_pp0_it1, ap_sig_cseq_ST_pp0_stg0_fsm_1)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1))) then 
            score_in_ce1 <= ap_const_logic_1;
        else 
            score_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    score_out_addr_3_gep_fu_149_p3 <= tmp_5_reg_437(7 - 1 downto 0);
    score_out_addr_4_gep_fu_141_p3 <= tmp_5_reg_437(7 - 1 downto 0);

    -- score_out_address0 assign process. --
    score_out_address0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, ap_reg_ppstg_tmp_4_reg_409_pp0_it1, tmp_5_reg_437, or_cond_fu_333_p2, or_cond1_fu_353_p2, ap_sig_cseq_ST_st9_fsm_3, score_out_addr_4_gep_fu_141_p3, score_out_addr_3_gep_fu_149_p3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and not((ap_const_lv1_0 = or_cond1_fu_353_p2)))) then 
            score_out_address0 <= score_out_addr_3_gep_fu_149_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and (ap_const_lv1_0 = or_cond1_fu_353_p2))) then 
            score_out_address0 <= score_out_addr_4_gep_fu_141_p3;
        elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = or_cond_fu_333_p2))) then 
            score_out_address0 <= tmp_5_reg_437(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_3)) then 
            score_out_address0 <= ap_const_lv64_64(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) then 
            score_out_address0 <= ap_reg_ppstg_tmp_4_reg_409_pp0_it1(7 - 1 downto 0);
        else 
            score_out_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- score_out_ce0 assign process. --
    score_out_ce0_assign_proc : process(ap_sig_cseq_ST_pp0_stg1_fsm_2, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond_fu_333_p2, or_cond1_fu_353_p2, ap_sig_cseq_ST_st9_fsm_3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg1_fsm_2) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = or_cond_fu_333_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and (ap_const_lv1_0 = or_cond1_fu_353_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and not((ap_const_lv1_0 = or_cond1_fu_353_p2))))) then 
            score_out_ce0 <= ap_const_logic_1;
        else 
            score_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- score_out_d0 assign process. --
    score_out_d0_assign_proc : process(or_cond_fu_333_p2, tmp_11_fu_339_p1, tmp_13_fu_359_p1, tmp_12_fu_364_p1, ap_sig_bdd_164, ap_sig_bdd_213, ap_sig_bdd_216)
    begin
        if (ap_sig_bdd_213) then
            if (ap_sig_bdd_164) then 
                score_out_d0 <= tmp_12_fu_364_p1;
            elsif (ap_sig_bdd_216) then 
                score_out_d0 <= tmp_13_fu_359_p1;
            elsif ((ap_const_lv1_0 = or_cond_fu_333_p2)) then 
                score_out_d0 <= tmp_11_fu_339_p1;
            else 
                score_out_d0 <= "XXXXXXXX";
            end if;
        else 
            score_out_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- score_out_we0 assign process. --
    score_out_we0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_sig_cseq_ST_pp0_stg0_fsm_1, or_cond_fu_333_p2, or_cond1_fu_353_p2)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and (ap_const_lv1_0 = or_cond_fu_333_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and (ap_const_lv1_0 = or_cond1_fu_353_p2)) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_1) and not((ap_const_lv1_0 = or_cond_fu_333_p2)) and not((ap_const_lv1_0 = or_cond1_fu_353_p2))))) then 
            score_out_we0 <= ap_const_logic_1;
        else 
            score_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_339_p1 <= diag_score_reg_463(8 - 1 downto 0);
    tmp_12_fu_364_p1 <= up_score_reg_471(8 - 1 downto 0);
    tmp_13_fu_359_p1 <= left_score_fu_318_p2(8 - 1 downto 0);
        tmp_1_fu_368_p1 <= std_logic_vector(resize(signed(score_out_load_reg_506),32));

    tmp_2_fu_375_p2 <= "1" when (signed(tmp_1_fu_368_p1) > signed(max_score)) else "0";
    tmp_3_fu_261_p2 <= std_logic_vector(unsigned(j_phi_fu_224_p4) + unsigned(ap_const_lv7_7F));
    tmp_4_fu_267_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_261_p2),64));
    tmp_5_fu_278_p1 <= std_logic_vector(resize(unsigned(j_reg_220),64));
    tmp_6_fu_283_p2 <= "1" when (reads_load_reg_422 = ref_genome) else "0";
    tmp_7_fu_324_p2 <= "1" when (signed(diag_score_reg_463) < signed(left_score_fu_318_p2)) else "0";
    tmp_8_fu_329_p2 <= "1" when (signed(diag_score_reg_463) < signed(up_score_reg_471)) else "0";
    tmp_9_fu_343_p2 <= "1" when (signed(left_score_fu_318_p2) < signed(diag_score_reg_463)) else "0";
    tmp_fu_237_p2 <= "1" when (i = ap_const_lv32_1) else "0";
    tmp_s_fu_348_p2 <= "1" when (signed(left_score_fu_318_p2) < signed(up_score_reg_471)) else "0";
        up_cast_fu_291_p1 <= std_logic_vector(resize(signed(score_in_q1),9));

    up_score_fu_308_p2 <= std_logic_vector(signed(up_cast_fu_291_p1) + signed(ap_const_lv9_1FF));
end behav;
