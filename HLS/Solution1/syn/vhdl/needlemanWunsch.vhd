-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.2
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity needlemanWunsch is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    read_r_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    read_r_EN_A : OUT STD_LOGIC;
    read_r_WEN_A : OUT STD_LOGIC_VECTOR (0 downto 0);
    read_r_Din_A : OUT STD_LOGIC_VECTOR (7 downto 0);
    read_r_Dout_A : IN STD_LOGIC_VECTOR (7 downto 0);
    read_r_Clk_A : OUT STD_LOGIC;
    read_r_Rst_A : OUT STD_LOGIC;
    ref_genome_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    ref_genome_TVALID : IN STD_LOGIC;
    ref_genome_TREADY : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of needlemanWunsch is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "needlemanWunsch,hls_ip_2015_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.828000,HLS_SYN_LAT=110000001,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=688,HLS_SYN_LUT=1296}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_pp0_stg0_fsm_4 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_st13_fsm_5 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_st14_fsm_6 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_pp1_stg0_fsm_7 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_st23_fsm_8 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv32_FFFFFF9C : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111110011100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv20_F4241 : STD_LOGIC_VECTOR (19 downto 0) := "11110100001001000001";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_65 : STD_LOGIC_VECTOR (6 downto 0) := "1100101";
    constant ap_const_lv7_7F : STD_LOGIC_VECTOR (6 downto 0) := "1111111";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv20_2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_50 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (19 downto 0);
    signal needlemanWunsch_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal j_0_i2_reg_284 : STD_LOGIC_VECTOR (6 downto 0);
    signal score_out1_reg_295 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_12_reg_307 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_0_i_reg_317 : STD_LOGIC_VECTOR (6 downto 0);
    signal score_out2_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_14_reg_340 : STD_LOGIC_VECTOR (19 downto 0);
    signal prev_orig_out_fu_377_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal prev_orig_out_reg_1249 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_103 : BOOLEAN;
    signal tmp_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_383_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_reg_1255 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_48_fu_432_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_reg_1260 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_119 : BOOLEAN;
    signal tmp_49_fu_440_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_reg_1265 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_448_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_50_reg_1270 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_57_fu_485_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_57_reg_1275 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_135 : BOOLEAN;
    signal tmp_5_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1280 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i5_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i5_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_148 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i2_cast_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i2_cast_reg_1297 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_1304_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_1304_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_1304_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_6_reg_1304_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_517_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_reg_1311 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_14_reg_1311_pp0_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_76_fu_538_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_76_reg_1321 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_fu_542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_11_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1331 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_84_fu_598_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_84_reg_1336 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_85_fu_606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_85_reg_1341 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_86_fu_614_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_86_reg_1346 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_18_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_1356 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1356_pp0_it3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1356_pp0_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1356_pp0_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_18_reg_1356_pp0_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_664_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_93_reg_1373 : STD_LOGIC_VECTOR (1 downto 0);
    signal sel_tmp_fu_673_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp_reg_1378 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp2_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal up_fu_689_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal up_reg_1388 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_13_fu_700_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal prev_orig_out_13_reg_1393 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_reg_ppstg_prev_orig_out_13_reg_1393_pp0_it4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_reg_ppstg_prev_orig_out_13_reg_1393_pp0_it5 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_29_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_1398 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_score_out_8_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_8_reg_1408 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_prev_score_out_8_reg_1408_pp0_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal up_score_fu_730_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal up_score_reg_1416 : STD_LOGIC_VECTOR (7 downto 0);
    signal up_orig_fu_735_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal up_orig_reg_1423 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond_i1_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i1_reg_1428 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i1_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i1_reg_1434 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_score_out_1_fu_786_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_1_reg_1439 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_3_fu_799_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_7_fu_805_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal prev_orig_out_7_reg_1449 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_66_fu_861_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_66_reg_1455 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_cseq_ST_st13_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_273 : BOOLEAN;
    signal tmp_67_fu_869_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_reg_1460 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_68_fu_877_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_68_reg_1465 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_orig_1_fu_895_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_orig_1_reg_1470 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st14_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_287 : BOOLEAN;
    signal max_score_1_fu_903_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_score_1_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_75_fu_940_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_75_reg_1481 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_i_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_1486 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_pp1_stg0_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_300 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i_reg_1486_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1486_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1486_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1486_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_954_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_15_reg_1490 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_15_reg_1490_pp1_it1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_ppstg_tmp_15_reg_1490_pp1_it2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_960_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_1495 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_1495_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_1495_pp1_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_1495_pp1_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_17_reg_1495_pp1_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_966_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_1502 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_tmp_19_reg_1502_pp1_it1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_987_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_94_reg_1512 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_fu_991_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_102_fu_1042_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_102_reg_1522 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_103_fu_1050_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_reg_1527 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_1058_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_104_reg_1532 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_111_fu_1104_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_111_reg_1547 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_16_fu_1108_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_1552 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_16_reg_1552_pp1_it4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_16_reg_1552_pp1_it5 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_tmp_16_reg_1552_pp1_it6 : STD_LOGIC_VECTOR (63 downto 0);
    signal score2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal score2_load_1_reg_1564 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_15_fu_1112_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal prev_orig_out_15_reg_1569 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_reg_ppstg_prev_orig_out_15_reg_1569_pp1_it4 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_reg_ppstg_prev_orig_out_15_reg_1569_pp1_it5 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_41_fu_1119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_reg_1574 : STD_LOGIC_VECTOR (0 downto 0);
    signal up_score_1_fu_1129_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal up_score_1_reg_1584 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_fu_1142_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_reg_1591 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_ppstg_prev_score_out_reg_1591_pp1_it5 : STD_LOGIC_VECTOR (7 downto 0);
    signal orig2_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal up_orig_1_reg_1599 : STD_LOGIC_VECTOR (19 downto 0);
    signal or_cond_i_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_reg_1604 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_fu_1186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_i_reg_1610 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_score_out_2_fu_1192_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_2_reg_1615 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_7_fu_1205_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_11_fu_1211_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal prev_orig_out_11_reg_1625 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_orig_2_fu_1226_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_419 : BOOLEAN;
    signal max_score_2_fu_1233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1240_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal score1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal score1_ce0 : STD_LOGIC;
    signal score1_we0 : STD_LOGIC;
    signal score1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal score1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal score1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal score1_ce1 : STD_LOGIC;
    signal score1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal score2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal score2_ce0 : STD_LOGIC;
    signal score2_we0 : STD_LOGIC;
    signal score2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal score2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal score2_ce1 : STD_LOGIC;
    signal score2_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal orig1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal orig1_ce0 : STD_LOGIC;
    signal orig1_we0 : STD_LOGIC;
    signal orig1_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal orig1_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal orig1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal orig1_ce1 : STD_LOGIC;
    signal orig1_q1 : STD_LOGIC_VECTOR (19 downto 0);
    signal orig2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal orig2_ce0 : STD_LOGIC;
    signal orig2_we0 : STD_LOGIC;
    signal orig2_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal orig2_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal orig2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal orig2_ce1 : STD_LOGIC;
    signal prev_orig_out_1_reg_248 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_orig_reg_260 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_score_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal score_out1_phi_fu_299_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_12_phi_fu_310_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal score_out2_phi_fu_332_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_orig_out_14_phi_fu_343_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_1069_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal read_r_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_387_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_25_fu_406_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_40_fu_414_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_47_fu_426_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_46_fu_420_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_51_fu_456_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_52_fu_461_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_523_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_26_fu_553_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_fu_560_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_78_fu_572_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_79_fu_576_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_77_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_81_fu_580_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_83_fu_592_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_361_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_82_fu_586_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_cast_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_fu_635_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_88_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_89_fu_643_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_90_fu_647_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_652_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_658_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_668_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_684_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal brmerge_i1_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal diag_score_0_v_i1_cast_cast_fu_717_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal diag_fu_711_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_0_op_i1_fu_742_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_9_fu_748_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_orig_out_5_fu_793_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_58_fu_811_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_815_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_823_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_60_fu_835_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_61_fu_839_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_59_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_63_fu_843_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_65_fu_855_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_64_fu_849_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_score_3_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_69_fu_911_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_70_fu_916_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_71_fu_919_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_fu_923_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_73_fu_928_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_74_fu_934_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_0_i_cast_fu_950_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_972_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_38_fu_997_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_39_fu_1004_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_96_fu_1016_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_97_fu_1020_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_95_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_1024_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_101_fu_1036_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_100_fu_1030_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_cast_fu_1066_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_fu_1075_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_106_fu_1080_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_107_fu_1083_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_108_fu_1087_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_1092_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_110_fu_1098_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal diag_score_0_v_i_cast_cast_fu_1135_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal diag_1_fu_1123_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_0_op_i_fu_1148_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal prev_score_out_10_fu_1154_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_fu_1176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_45_fu_1181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prev_orig_out_6_fu_1199_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal max_score_4_fu_1217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_1221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);

    component needlemanWunsch_score1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component needlemanWunsch_orig1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component needlemanWunsch_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    needlemanWunsch_AXILiteS_s_axi_U : component needlemanWunsch_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => needlemanWunsch_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return);

    score1_U : component needlemanWunsch_score1
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => score1_address0,
        ce0 => score1_ce0,
        we0 => score1_we0,
        d0 => score1_d0,
        q0 => score1_q0,
        address1 => score1_address1,
        ce1 => score1_ce1,
        q1 => score1_q1);

    score2_U : component needlemanWunsch_score1
    generic map (
        DataWidth => 8,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => score2_address0,
        ce0 => score2_ce0,
        we0 => score2_we0,
        d0 => score2_d0,
        q0 => score2_q0,
        address1 => score2_address1,
        ce1 => score2_ce1,
        q1 => score2_q1);

    orig1_U : component needlemanWunsch_orig1
    generic map (
        DataWidth => 20,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => orig1_address0,
        ce0 => orig1_ce0,
        we0 => orig1_we0,
        d0 => orig1_d0,
        q0 => orig1_q0,
        address1 => orig1_address1,
        ce1 => orig1_ce1,
        q1 => orig1_q1);

    orig2_U : component needlemanWunsch_orig1
    generic map (
        DataWidth => 20,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => orig2_address0,
        ce0 => orig2_ce0,
        we0 => orig2_we0,
        d0 => orig2_d0,
        q0 => orig2_q0,
        address1 => orig2_address1,
        ce1 => orig2_ce1,
        q1 => orig2_q1);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_i5_fu_501_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_i5_fu_501_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and not((ap_const_lv1_0 = exitcond_i5_fu_501_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = exitcond_i_fu_944_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_6)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = exitcond_i_fu_944_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and not((ap_const_lv1_0 = exitcond_i_fu_944_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it3 assign process. --
    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it4 assign process. --
    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it5 assign process. --
    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it6 assign process. --
    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it7 assign process. --
    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
            end if;
        end if;
    end process;


    -- j_0_i2_reg_284 assign process. --
    j_0_i2_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_i5_fu_501_p2))) then 
                j_0_i2_reg_284 <= j_fu_542_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                j_0_i2_reg_284 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    -- j_0_i_reg_317 assign process. --
    j_0_i_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and (ap_const_lv1_0 = exitcond_i_fu_944_p2))) then 
                j_0_i_reg_317 <= j_1_fu_991_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_6)) then 
                j_0_i_reg_317 <= ap_const_lv7_1;
            end if; 
        end if;
    end process;

    -- max_orig_reg_260 assign process. --
    max_orig_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_8)) then 
                max_orig_reg_260 <= max_orig_2_fu_1226_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                max_orig_reg_260 <= ap_const_lv20_0;
            end if; 
        end if;
    end process;

    -- max_score_reg_272 assign process. --
    max_score_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_8)) then 
                max_score_reg_272 <= max_score_2_fu_1233_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                max_score_reg_272 <= ap_const_lv32_FFFFFF9C;
            end if; 
        end if;
    end process;

    -- prev_orig_out_12_reg_307 assign process. --
    prev_orig_out_12_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6))) then 
                prev_orig_out_12_reg_307 <= prev_orig_out_7_reg_1449;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                prev_orig_out_12_reg_307 <= prev_orig_out_reg_1249;
            end if; 
        end if;
    end process;

    -- prev_orig_out_14_reg_340 assign process. --
    prev_orig_out_14_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6))) then 
                prev_orig_out_14_reg_340 <= prev_orig_out_11_reg_1625;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_6)) then 
                prev_orig_out_14_reg_340 <= prev_orig_out_1_reg_248;
            end if; 
        end if;
    end process;

    -- prev_orig_out_1_reg_248 assign process. --
    prev_orig_out_1_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_8)) then 
                prev_orig_out_1_reg_248 <= i_fu_1240_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                prev_orig_out_1_reg_248 <= ap_const_lv20_1;
            end if; 
        end if;
    end process;

    -- score_out1_reg_295 assign process. --
    score_out1_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5))) then 
                score_out1_reg_295 <= prev_score_out_3_fu_799_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
                score_out1_reg_295 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- score_out2_reg_328 assign process. --
    score_out2_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5))) then 
                score_out2_reg_328 <= prev_score_out_7_fu_1205_p3;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_6)) then 
                score_out2_reg_328 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4)) then
                ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it1 <= exitcond_i5_reg_1293;
                    ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it1(6 downto 0) <= j_0_i2_cast_reg_1297(6 downto 0);
                ap_reg_ppstg_tmp_14_reg_1311_pp0_it1 <= tmp_14_reg_1311;
                ap_reg_ppstg_tmp_6_reg_1304_pp0_it1 <= tmp_6_reg_1304;
                exitcond_i5_reg_1293 <= exitcond_i5_fu_501_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it2 <= ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it1;
                ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it3 <= ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it2;
                ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it4 <= ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it3;
                ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5 <= ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it4;
                ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6 <= ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5;
                ap_reg_ppstg_exitcond_i_reg_1486_pp1_it2 <= ap_reg_ppstg_exitcond_i_reg_1486_pp1_it1;
                ap_reg_ppstg_exitcond_i_reg_1486_pp1_it3 <= ap_reg_ppstg_exitcond_i_reg_1486_pp1_it2;
                ap_reg_ppstg_exitcond_i_reg_1486_pp1_it4 <= ap_reg_ppstg_exitcond_i_reg_1486_pp1_it3;
                ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5 <= ap_reg_ppstg_exitcond_i_reg_1486_pp1_it4;
                ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6 <= ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5;
                    ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it2(6 downto 0) <= ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it1(6 downto 0);
                ap_reg_ppstg_prev_orig_out_13_reg_1393_pp0_it4 <= prev_orig_out_13_reg_1393;
                ap_reg_ppstg_prev_orig_out_13_reg_1393_pp0_it5 <= ap_reg_ppstg_prev_orig_out_13_reg_1393_pp0_it4;
                ap_reg_ppstg_prev_orig_out_15_reg_1569_pp1_it4 <= prev_orig_out_15_reg_1569;
                ap_reg_ppstg_prev_orig_out_15_reg_1569_pp1_it5 <= ap_reg_ppstg_prev_orig_out_15_reg_1569_pp1_it4;
                ap_reg_ppstg_prev_score_out_8_reg_1408_pp0_it5 <= prev_score_out_8_reg_1408;
                ap_reg_ppstg_prev_score_out_reg_1591_pp1_it5 <= prev_score_out_reg_1591;
                ap_reg_ppstg_tmp_15_reg_1490_pp1_it2 <= ap_reg_ppstg_tmp_15_reg_1490_pp1_it1;
                    ap_reg_ppstg_tmp_16_reg_1552_pp1_it4(6 downto 0) <= tmp_16_reg_1552(6 downto 0);
                    ap_reg_ppstg_tmp_16_reg_1552_pp1_it5(6 downto 0) <= ap_reg_ppstg_tmp_16_reg_1552_pp1_it4(6 downto 0);
                    ap_reg_ppstg_tmp_16_reg_1552_pp1_it6(6 downto 0) <= ap_reg_ppstg_tmp_16_reg_1552_pp1_it5(6 downto 0);
                ap_reg_ppstg_tmp_17_reg_1495_pp1_it2 <= ap_reg_ppstg_tmp_17_reg_1495_pp1_it1;
                ap_reg_ppstg_tmp_17_reg_1495_pp1_it3 <= ap_reg_ppstg_tmp_17_reg_1495_pp1_it2;
                ap_reg_ppstg_tmp_17_reg_1495_pp1_it4 <= ap_reg_ppstg_tmp_17_reg_1495_pp1_it3;
                    ap_reg_ppstg_tmp_18_reg_1356_pp0_it3(6 downto 0) <= tmp_18_reg_1356(6 downto 0);
                    ap_reg_ppstg_tmp_18_reg_1356_pp0_it4(6 downto 0) <= ap_reg_ppstg_tmp_18_reg_1356_pp0_it3(6 downto 0);
                    ap_reg_ppstg_tmp_18_reg_1356_pp0_it5(6 downto 0) <= ap_reg_ppstg_tmp_18_reg_1356_pp0_it4(6 downto 0);
                    ap_reg_ppstg_tmp_18_reg_1356_pp0_it6(6 downto 0) <= ap_reg_ppstg_tmp_18_reg_1356_pp0_it5(6 downto 0);
                ap_reg_ppstg_tmp_6_reg_1304_pp0_it2 <= ap_reg_ppstg_tmp_6_reg_1304_pp0_it1;
                ap_reg_ppstg_tmp_6_reg_1304_pp0_it3 <= ap_reg_ppstg_tmp_6_reg_1304_pp0_it2;
                ap_reg_ppstg_tmp_6_reg_1304_pp0_it4 <= ap_reg_ppstg_tmp_6_reg_1304_pp0_it3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7)) then
                ap_reg_ppstg_exitcond_i_reg_1486_pp1_it1 <= exitcond_i_reg_1486;
                ap_reg_ppstg_tmp_15_reg_1490_pp1_it1 <= tmp_15_reg_1490;
                ap_reg_ppstg_tmp_17_reg_1495_pp1_it1 <= tmp_17_reg_1495;
                ap_reg_ppstg_tmp_19_reg_1502_pp1_it1 <= tmp_19_reg_1502;
                exitcond_i_reg_1486 <= exitcond_i_fu_944_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_i5_fu_501_p2))) then
                    j_0_i2_cast_reg_1297(6 downto 0) <= j_0_i2_cast_fu_507_p1(6 downto 0);
                tmp_14_reg_1311 <= tmp_14_fu_517_p2;
                tmp_6_reg_1304 <= tmp_6_fu_511_p2;
                tmp_76_reg_1321 <= tmp_76_fu_538_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_6)) then
                max_orig_1_reg_1470 <= max_orig_1_fu_895_p3;
                max_score_1_reg_1475 <= max_score_1_fu_903_p3;
                tmp_75_reg_1481 <= tmp_75_fu_940_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it4)) then
                or_cond1_i1_reg_1434 <= or_cond1_i1_fu_780_p2;
                or_cond_i1_reg_1428 <= or_cond_i1_fu_764_p2;
                prev_score_out_1_reg_1439 <= prev_score_out_1_fu_786_p3;
                up_orig_reg_1423 <= up_orig_fu_735_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it4)) then
                or_cond1_i_reg_1610 <= or_cond1_i_fu_1186_p2;
                or_cond_i_reg_1604 <= or_cond_i_fu_1170_p2;
                prev_score_out_2_reg_1615 <= prev_score_out_2_fu_1192_p3;
                up_orig_1_reg_1599 <= orig2_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5))) then
                prev_orig_out_11_reg_1625 <= prev_orig_out_11_fu_1211_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it2)) then
                prev_orig_out_13_reg_1393 <= prev_orig_out_13_fu_700_p3;
                sel_tmp2_reg_1383 <= sel_tmp2_fu_680_p2;
                sel_tmp_reg_1378 <= sel_tmp_fu_673_p3;
                tmp_29_reg_1398 <= tmp_29_fu_707_p2;
                up_reg_1388 <= up_fu_689_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it2)) then
                prev_orig_out_15_reg_1569 <= prev_orig_out_15_fu_1112_p3;
                    tmp_16_reg_1552(6 downto 0) <= tmp_16_fu_1108_p1(6 downto 0);
                tmp_41_reg_1574 <= tmp_41_fu_1119_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5))) then
                prev_orig_out_7_reg_1449 <= prev_orig_out_7_fu_805_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((tmp_fu_371_p2 = ap_const_lv1_0)))) then
                prev_orig_out_reg_1249 <= prev_orig_out_fu_377_p2;
                tmp_22_reg_1255 <= tmp_22_fu_383_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it3)) then
                prev_score_out_8_reg_1408 <= prev_score_out_8_fu_724_p2;
                up_score_reg_1416 <= up_score_fu_730_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it3)) then
                prev_score_out_reg_1591 <= prev_score_out_fu_1142_p2;
                up_score_1_reg_1584 <= up_score_1_fu_1129_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it2) and (ap_const_lv1_0 = ap_reg_ppstg_tmp_17_reg_1495_pp1_it2))) then
                score2_load_1_reg_1564 <= score2_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                sel_tmp1_reg_1288 <= sel_tmp1_fu_495_p2;
                tmp_57_reg_1275 <= tmp_57_fu_485_p1;
                tmp_5_reg_1280 <= tmp_5_fu_489_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = exitcond_i_reg_1486))) then
                    tmp_102_reg_1522(3 downto 1) <= tmp_102_fu_1042_p3(3 downto 1);
                tmp_103_reg_1527 <= tmp_103_fu_1050_p3;
                tmp_104_reg_1532 <= tmp_104_fu_1058_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it1)) then
                tmp_111_reg_1547 <= tmp_111_fu_1104_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_lv1_0 = exitcond_i5_reg_1293))) then
                tmp_11_reg_1331 <= tmp_11_fu_548_p2;
                    tmp_84_reg_1336(3 downto 1) <= tmp_84_fu_598_p3(3 downto 1);
                tmp_85_reg_1341 <= tmp_85_fu_606_p3;
                tmp_86_reg_1346 <= tmp_86_fu_614_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_lv1_0 = exitcond_i_fu_944_p2))) then
                tmp_15_reg_1490 <= tmp_15_fu_954_p2;
                tmp_17_reg_1495 <= tmp_17_fu_960_p2;
                tmp_19_reg_1502 <= tmp_19_fu_966_p2;
                tmp_94_reg_1512 <= tmp_94_fu_987_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it1)) then
                    tmp_18_reg_1356(6 downto 0) <= tmp_18_fu_631_p1(6 downto 0);
                tmp_93_reg_1373 <= tmp_93_fu_664_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ref_genome_TVALID = ap_const_logic_0)))) then
                    tmp_48_reg_1260(3 downto 1) <= tmp_48_fu_432_p3(3 downto 1);
                tmp_49_reg_1265 <= tmp_49_fu_440_p3;
                tmp_50_reg_1270 <= tmp_50_fu_448_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ref_genome_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_5))) then
                    tmp_66_reg_1455(3 downto 1) <= tmp_66_fu_861_p3(3 downto 1);
                tmp_67_reg_1460 <= tmp_67_fu_869_p3;
                tmp_68_reg_1465 <= tmp_68_fu_877_p3;
            end if;
        end if;
    end process;
    tmp_48_reg_1260(0) <= '1';
    j_0_i2_cast_reg_1297(7) <= '0';
    ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it1(7) <= '0';
    ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it2(7) <= '0';
    tmp_84_reg_1336(0) <= '1';
    tmp_18_reg_1356(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_18_reg_1356_pp0_it3(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_18_reg_1356_pp0_it4(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_18_reg_1356_pp0_it5(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_18_reg_1356_pp0_it6(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_66_reg_1455(0) <= '1';
    tmp_102_reg_1522(0) <= '1';
    tmp_16_reg_1552(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_16_reg_1552_pp1_it4(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_16_reg_1552_pp1_it5(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    ap_reg_ppstg_tmp_16_reg_1552_pp1_it6(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ref_genome_TVALID, tmp_fu_371_p2, exitcond_i5_fu_501_p2, ap_reg_ppiten_pp0_it0, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp0_it7, exitcond_i_fu_944_p2, ap_reg_ppiten_pp1_it0, ap_reg_ppiten_pp1_it1, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp1_it7)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((tmp_fu_371_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ref_genome_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
            when ap_ST_pp0_stg0_fsm_4 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_i5_fu_501_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_4;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_i5_fu_501_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_5;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_5;
                end if;
            when ap_ST_st13_fsm_5 => 
                if (not((ref_genome_TVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st14_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st13_fsm_5;
                end if;
            when ap_ST_st14_fsm_6 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
            when ap_ST_pp1_stg0_fsm_7 => 
                if ((not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it6)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_i_fu_944_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_7;
                elsif (((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_const_lv1_0 = exitcond_i_fu_944_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_8;
                end if;
            when ap_ST_st23_fsm_8 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_371_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_371_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, tmp_fu_371_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (tmp_fu_371_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_orig_reg_260;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_103 assign process. --
    ap_sig_bdd_103_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_103 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_119 assign process. --
    ap_sig_bdd_119_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_119 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_135 assign process. --
    ap_sig_bdd_135_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_135 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_148 assign process. --
    ap_sig_bdd_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_148 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_273 assign process. --
    ap_sig_bdd_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_273 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_287 assign process. --
    ap_sig_bdd_287_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_287 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_300 assign process. --
    ap_sig_bdd_300_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_300 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_419 assign process. --
    ap_sig_bdd_419_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_419 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_50 assign process. --
    ap_sig_bdd_50_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_50 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_4 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_4_assign_proc : process(ap_sig_bdd_148)
    begin
        if (ap_sig_bdd_148) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_pp1_stg0_fsm_7 assign process. --
    ap_sig_cseq_ST_pp1_stg0_fsm_7_assign_proc : process(ap_sig_bdd_300)
    begin
        if (ap_sig_bdd_300) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_5 assign process. --
    ap_sig_cseq_ST_st13_fsm_5_assign_proc : process(ap_sig_bdd_273)
    begin
        if (ap_sig_bdd_273) then 
            ap_sig_cseq_ST_st13_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_6 assign process. --
    ap_sig_cseq_ST_st14_fsm_6_assign_proc : process(ap_sig_bdd_287)
    begin
        if (ap_sig_bdd_287) then 
            ap_sig_cseq_ST_st14_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_50)
    begin
        if (ap_sig_bdd_50) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_8 assign process. --
    ap_sig_cseq_ST_st23_fsm_8_assign_proc : process(ap_sig_bdd_419)
    begin
        if (ap_sig_bdd_419) then 
            ap_sig_cseq_ST_st23_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_103)
    begin
        if (ap_sig_bdd_103) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_119)
    begin
        if (ap_sig_bdd_119) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_135)
    begin
        if (ap_sig_bdd_135) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_i1_fu_696_p2 <= (tmp_5_reg_1280 or ap_reg_ppstg_tmp_6_reg_1304_pp0_it2);
    diag_1_fu_1123_p3 <= 
        ap_const_lv8_0 when (ap_reg_ppstg_tmp_17_reg_1495_pp1_it3(0) = '1') else 
        score2_load_1_reg_1564;
    diag_fu_711_p3 <= 
        ap_const_lv8_0 when (sel_tmp2_reg_1383(0) = '1') else 
        sel_tmp_reg_1378;
    diag_score_0_v_i1_cast_cast_fu_717_p3 <= 
        ap_const_lv8_1 when (tmp_29_reg_1398(0) = '1') else 
        ap_const_lv8_FF;
    diag_score_0_v_i_cast_cast_fu_1135_p3 <= 
        ap_const_lv8_1 when (tmp_41_reg_1574(0) = '1') else 
        ap_const_lv8_FF;
    exitcond_i5_fu_501_p2 <= "1" when (j_0_i2_reg_284 = ap_const_lv7_65) else "0";
    exitcond_i_fu_944_p2 <= "1" when (j_0_i_reg_317 = ap_const_lv7_65) else "0";
    
    grp_fu_351_p4_proc : process(ref_genome_TDATA)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable grp_fu_351_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := ref_genome_TDATA;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for grp_fu_351_p4_i in 0 to 8-1 loop
                v0_cpy(grp_fu_351_p4_i) := ref_genome_TDATA(8-1-grp_fu_351_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        grp_fu_351_p4 <= resvalue(8-1 downto 0);
    end process;

    
    grp_fu_361_p4_proc : process(read_r_Dout_A)
    variable vlo_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(8+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable grp_fu_361_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(8 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(3 - 1 downto 0) := ap_const_lv32_7(3 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(3 - 1 downto 0) := ap_const_lv32_0(3 - 1 downto 0);
        v0_cpy := read_r_Dout_A;
        if (vlo_cpy(3 - 1 downto 0) > vhi_cpy(3 - 1 downto 0)) then
            vhi_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_0(3-1 downto 0)));
            vlo_cpy(3-1 downto 0) := std_logic_vector(8-1-unsigned(ap_const_lv32_7(3-1 downto 0)));
            for grp_fu_361_p4_i in 0 to 8-1 loop
                v0_cpy(grp_fu_361_p4_i) := read_r_Dout_A(8-1-grp_fu_361_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy),to_integer(unsigned('0' & vlo_cpy(3-1 downto 0)))));

        section := (others=>'0');
        section(3-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(3-1 downto 0)) - unsigned(vlo_cpy(3-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(8-1 downto 0)))));
        res_mask := res_mask(8-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        grp_fu_361_p4 <= resvalue(8-1 downto 0);
    end process;

    i_fu_1240_p2 <= std_logic_vector(unsigned(prev_orig_out_1_reg_248) + unsigned(ap_const_lv20_2));
    j_0_i2_cast_fu_507_p1 <= std_logic_vector(resize(unsigned(j_0_i2_reg_284),8));
    j_0_i_cast_fu_950_p1 <= std_logic_vector(resize(unsigned(j_0_i_reg_317),8));
    j_1_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(j_0_i_reg_317));
    j_fu_542_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(j_0_i2_reg_284));
    max_orig_1_fu_895_p3 <= 
        prev_orig_out_12_reg_307 when (tmp_7_fu_889_p2(0) = '1') else 
        max_orig_reg_260;
    max_orig_2_fu_1226_p3 <= 
        prev_orig_out_14_reg_340 when (tmp_10_fu_1221_p2(0) = '1') else 
        max_orig_1_reg_1470;
    max_score_1_fu_903_p3 <= 
        max_score_3_fu_885_p1 when (tmp_7_fu_889_p2(0) = '1') else 
        max_score_reg_272;
    max_score_2_fu_1233_p3 <= 
        max_score_4_fu_1217_p1 when (tmp_10_fu_1221_p2(0) = '1') else 
        max_score_1_reg_1475;
        max_score_3_fu_885_p1 <= std_logic_vector(resize(signed(score_out1_reg_295),32));

        max_score_4_fu_1217_p1 <= std_logic_vector(resize(signed(score_out2_reg_328),32));

    needlemanWunsch_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    or_cond1_i1_fu_780_p2 <= (tmp_33_fu_770_p2 or tmp_34_fu_775_p2);
    or_cond1_i_fu_1186_p2 <= (tmp_44_fu_1176_p2 or tmp_45_fu_1181_p2);
    or_cond_i1_fu_764_p2 <= (tmp_30_fu_755_p2 or tmp_32_fu_760_p2);
    or_cond_i_fu_1170_p2 <= (tmp_42_fu_1161_p2 or tmp_43_fu_1166_p2);

    -- orig1_address0 assign process. --
    orig1_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it7, ap_reg_ppstg_tmp_16_reg_1552_pp1_it6, tmp_12_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it7)) then 
            orig1_address0 <= ap_reg_ppstg_tmp_16_reg_1552_pp1_it6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            orig1_address0 <= tmp_12_fu_625_p1(7 - 1 downto 0);
        else 
            orig1_address0 <= "XXXXXXX";
        end if; 
    end process;

    orig1_address1 <= ap_reg_ppstg_tmp_18_reg_1356_pp0_it3(7 - 1 downto 0);

    -- orig1_ce0 assign process. --
    orig1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it7)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it7))) then 
            orig1_ce0 <= ap_const_logic_1;
        else 
            orig1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- orig1_ce1 assign process. --
    orig1_ce1_assign_proc : process(ap_reg_ppiten_pp0_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it4)) then 
            orig1_ce1 <= ap_const_logic_1;
        else 
            orig1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    orig1_d0 <= prev_orig_out_11_reg_1625;

    -- orig1_we0 assign process. --
    orig1_we0_assign_proc : process(ap_reg_ppiten_pp1_it7, ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6)))) then 
            orig1_we0 <= ap_const_logic_1;
        else 
            orig1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- orig2_address0 assign process. --
    orig2_address0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_tmp_18_reg_1356_pp0_it6, ap_reg_ppiten_pp1_it2, tmp_20_fu_1069_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it7)) then 
            orig2_address0 <= ap_reg_ppstg_tmp_18_reg_1356_pp0_it6(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            orig2_address0 <= tmp_20_fu_1069_p1(7 - 1 downto 0);
        else 
            orig2_address0 <= "XXXXXXX";
        end if; 
    end process;

    orig2_address1 <= tmp_16_reg_1552(7 - 1 downto 0);

    -- orig2_ce0 assign process. --
    orig2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppiten_pp1_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) then 
            orig2_ce0 <= ap_const_logic_1;
        else 
            orig2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- orig2_ce1 assign process. --
    orig2_ce1_assign_proc : process(ap_reg_ppiten_pp1_it4)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it4)) then 
            orig2_ce1 <= ap_const_logic_1;
        else 
            orig2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    orig2_d0 <= prev_orig_out_7_reg_1449;

    -- orig2_we0 assign process. --
    orig2_we0_assign_proc : process(ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6)))) then 
            orig2_we0 <= ap_const_logic_1;
        else 
            orig2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prev_orig_out_11_fu_1211_p3 <= 
        prev_orig_out_6_fu_1199_p3 when (or_cond_i_reg_1604(0) = '1') else 
        ap_reg_ppstg_prev_orig_out_15_reg_1569_pp1_it5;

    -- prev_orig_out_12_phi_fu_310_p4 assign process. --
    prev_orig_out_12_phi_fu_310_p4_assign_proc : process(prev_orig_out_12_reg_307, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6, prev_orig_out_7_reg_1449)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it6))) then 
            prev_orig_out_12_phi_fu_310_p4 <= prev_orig_out_7_reg_1449;
        else 
            prev_orig_out_12_phi_fu_310_p4 <= prev_orig_out_12_reg_307;
        end if; 
    end process;

    prev_orig_out_13_fu_700_p3 <= 
        prev_orig_out_reg_1249 when (brmerge_i1_fu_696_p2(0) = '1') else 
        orig1_q0;

    -- prev_orig_out_14_phi_fu_343_p4 assign process. --
    prev_orig_out_14_phi_fu_343_p4_assign_proc : process(prev_orig_out_14_reg_340, ap_reg_ppiten_pp1_it7, ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6, prev_orig_out_11_reg_1625)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it6))) then 
            prev_orig_out_14_phi_fu_343_p4 <= prev_orig_out_11_reg_1625;
        else 
            prev_orig_out_14_phi_fu_343_p4 <= prev_orig_out_14_reg_340;
        end if; 
    end process;

    prev_orig_out_15_fu_1112_p3 <= 
        prev_orig_out_1_reg_248 when (ap_reg_ppstg_tmp_17_reg_1495_pp1_it2(0) = '1') else 
        orig2_q0;
    prev_orig_out_5_fu_793_p3 <= 
        up_orig_reg_1423 when (or_cond1_i1_reg_1434(0) = '1') else 
        prev_orig_out_12_phi_fu_310_p4;
    prev_orig_out_6_fu_1199_p3 <= 
        up_orig_1_reg_1599 when (or_cond1_i_reg_1610(0) = '1') else 
        prev_orig_out_14_phi_fu_343_p4;
    prev_orig_out_7_fu_805_p3 <= 
        prev_orig_out_5_fu_793_p3 when (or_cond_i1_reg_1428(0) = '1') else 
        ap_reg_ppstg_prev_orig_out_13_reg_1393_pp0_it5;
    prev_orig_out_fu_377_p2 <= std_logic_vector(signed(ap_const_lv20_FFFFF) + signed(prev_orig_out_1_reg_248));
    prev_score_out_0_op_i1_fu_742_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(score_out1_phi_fu_299_p4));
    prev_score_out_0_op_i_fu_1148_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(score_out2_phi_fu_332_p4));
    prev_score_out_10_fu_1154_p3 <= 
        ap_const_lv8_FF when (ap_reg_ppstg_tmp_17_reg_1495_pp1_it4(0) = '1') else 
        prev_score_out_0_op_i_fu_1148_p2;
    prev_score_out_1_fu_786_p3 <= 
        up_score_reg_1416 when (or_cond1_i1_fu_780_p2(0) = '1') else 
        prev_score_out_9_fu_748_p3;
    prev_score_out_2_fu_1192_p3 <= 
        up_score_1_reg_1584 when (or_cond1_i_fu_1186_p2(0) = '1') else 
        prev_score_out_10_fu_1154_p3;
    prev_score_out_3_fu_799_p3 <= 
        prev_score_out_1_reg_1439 when (or_cond_i1_reg_1428(0) = '1') else 
        ap_reg_ppstg_prev_score_out_8_reg_1408_pp0_it5;
    prev_score_out_7_fu_1205_p3 <= 
        prev_score_out_2_reg_1615 when (or_cond_i_reg_1604(0) = '1') else 
        ap_reg_ppstg_prev_score_out_reg_1591_pp1_it5;
    prev_score_out_8_fu_724_p2 <= std_logic_vector(unsigned(diag_score_0_v_i1_cast_cast_fu_717_p3) + unsigned(diag_fu_711_p3));
    prev_score_out_9_fu_748_p3 <= 
        ap_const_lv8_FF when (ap_reg_ppstg_tmp_6_reg_1304_pp0_it4(0) = '1') else 
        prev_score_out_0_op_i1_fu_742_p2;
    prev_score_out_fu_1142_p2 <= std_logic_vector(unsigned(diag_score_0_v_i_cast_cast_fu_1135_p3) + unsigned(diag_1_fu_1123_p3));
    read_r_Addr_A <= std_logic_vector(shift_left(unsigned(read_r_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_0(31-1 downto 0)))));

    -- read_r_Addr_A_orig assign process. --
    read_r_Addr_A_orig_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it0, tmp_24_fu_533_p1, tmp_36_fu_982_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            read_r_Addr_A_orig <= tmp_36_fu_982_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            read_r_Addr_A_orig <= tmp_24_fu_533_p1(32 - 1 downto 0);
        else 
            read_r_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    read_r_Clk_A <= ap_clk;
    read_r_Din_A <= ap_const_lv8_0;

    -- read_r_EN_A assign process. --
    read_r_EN_A_assign_proc : process(ap_sig_cseq_ST_pp0_stg0_fsm_4, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp1_stg0_fsm_7, ap_reg_ppiten_pp1_it0)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_4) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_7) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)))) then 
            read_r_EN_A <= ap_const_logic_1;
        else 
            read_r_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    -- read_r_Rst_A assign process. --
    read_r_Rst_A_assign_proc : process(ap_rst_n)
    begin
                read_r_Rst_A <= not(ap_rst_n);
    end process;

    read_r_WEN_A <= ap_const_lv1_0;

    -- ref_genome_TREADY assign process. --
    ref_genome_TREADY_assign_proc : process(ref_genome_TVALID, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st13_fsm_5)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and not((ref_genome_TVALID = ap_const_logic_0))) or (not((ref_genome_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_5)))) then 
            ref_genome_TREADY <= ap_const_logic_1;
        else 
            ref_genome_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- score1_address0 assign process. --
    score1_address0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it6, ap_reg_ppstg_tmp_16_reg_1552_pp1_it5, tmp_12_fu_625_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it6)) then 
            score1_address0 <= ap_reg_ppstg_tmp_16_reg_1552_pp1_it5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            score1_address0 <= tmp_12_fu_625_p1(7 - 1 downto 0);
        else 
            score1_address0 <= "XXXXXXX";
        end if; 
    end process;

    score1_address1 <= tmp_18_fu_631_p1(7 - 1 downto 0);

    -- score1_ce0 assign process. --
    score1_ce0_assign_proc : process(ap_reg_ppiten_pp0_it2, ap_reg_ppiten_pp1_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it6))) then 
            score1_ce0 <= ap_const_logic_1;
        else 
            score1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- score1_ce1 assign process. --
    score1_ce1_assign_proc : process(ap_reg_ppiten_pp0_it2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then 
            score1_ce1 <= ap_const_logic_1;
        else 
            score1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    score1_d0 <= 
        prev_score_out_2_reg_1615 when (or_cond_i_reg_1604(0) = '1') else 
        ap_reg_ppstg_prev_score_out_reg_1591_pp1_it5;

    -- score1_we0 assign process. --
    score1_we0_assign_proc : process(ap_reg_ppiten_pp1_it6, ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5)))) then 
            score1_we0 <= ap_const_logic_1;
        else 
            score1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- score2_address0 assign process. --
    score2_address0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_tmp_18_reg_1356_pp0_it5, ap_reg_ppiten_pp1_it2, tmp_20_fu_1069_p1)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)) then 
            score2_address0 <= ap_reg_ppstg_tmp_18_reg_1356_pp0_it5(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it2)) then 
            score2_address0 <= tmp_20_fu_1069_p1(7 - 1 downto 0);
        else 
            score2_address0 <= "XXXXXXX";
        end if; 
    end process;

    score2_address1 <= tmp_16_fu_1108_p1(7 - 1 downto 0);

    -- score2_ce0 assign process. --
    score2_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp1_it2)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) then 
            score2_ce0 <= ap_const_logic_1;
        else 
            score2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- score2_ce1 assign process. --
    score2_ce1_assign_proc : process(ap_reg_ppiten_pp1_it3)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp1_it3)) then 
            score2_ce1 <= ap_const_logic_1;
        else 
            score2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    score2_d0 <= 
        prev_score_out_1_reg_1439 when (or_cond_i1_reg_1428(0) = '1') else 
        ap_reg_ppstg_prev_score_out_8_reg_1408_pp0_it5;

    -- score2_we0 assign process. --
    score2_we0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5)
    begin
        if ((((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5)))) then 
            score2_we0 <= ap_const_logic_1;
        else 
            score2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- score_out1_phi_fu_299_p4 assign process. --
    score_out1_phi_fu_299_p4_assign_proc : process(score_out1_reg_295, ap_reg_ppiten_pp0_it6, ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5, prev_score_out_3_fu_799_p3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i5_reg_1293_pp0_it5))) then 
            score_out1_phi_fu_299_p4 <= prev_score_out_3_fu_799_p3;
        else 
            score_out1_phi_fu_299_p4 <= score_out1_reg_295;
        end if; 
    end process;


    -- score_out2_phi_fu_332_p4 assign process. --
    score_out2_phi_fu_332_p4_assign_proc : process(score_out2_reg_328, ap_reg_ppiten_pp1_it6, ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5, prev_score_out_7_fu_1205_p3)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp1_it6) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_1486_pp1_it5))) then 
            score_out2_phi_fu_332_p4 <= prev_score_out_7_fu_1205_p3;
        else 
            score_out2_phi_fu_332_p4 <= score_out2_reg_328;
        end if; 
    end process;

    sel_tmp1_fu_495_p2 <= (tmp_5_fu_489_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_680_p2 <= (ap_reg_ppstg_tmp_6_reg_1304_pp0_it2 and sel_tmp1_reg_1288);
    sel_tmp_fu_673_p3 <= 
        tmp_s_fu_668_p2 when (tmp_5_reg_1280(0) = '1') else 
        score1_q0;
    tmp_100_fu_1030_p2 <= (tmp_96_fu_1016_p1 xor ap_const_lv4_7);
    tmp_101_fu_1036_p2 <= std_logic_vector(unsigned(tmp_97_fu_1020_p1) - unsigned(tmp_96_fu_1016_p1));
    tmp_102_fu_1042_p3 <= 
        tmp_99_fu_1024_p2 when (tmp_95_fu_1010_p2(0) = '1') else 
        tmp_101_fu_1036_p2;
    tmp_103_fu_1050_p3 <= 
        grp_fu_361_p4 when (tmp_95_fu_1010_p2(0) = '1') else 
        read_r_Dout_A;
    tmp_104_fu_1058_p3 <= 
        tmp_100_fu_1030_p2 when (tmp_95_fu_1010_p2(0) = '1') else 
        tmp_96_fu_1016_p1;
    tmp_105_fu_1075_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(tmp_102_reg_1522));
    tmp_106_fu_1080_p1 <= std_logic_vector(resize(unsigned(tmp_104_reg_1532),8));
    tmp_107_fu_1083_p1 <= std_logic_vector(resize(unsigned(tmp_105_fu_1075_p2),8));
    tmp_108_fu_1087_p2 <= std_logic_vector(shift_right(unsigned(tmp_103_reg_1527),to_integer(unsigned('0' & tmp_106_fu_1080_p1(8-1 downto 0)))));
    tmp_109_fu_1092_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & tmp_107_fu_1083_p1(8-1 downto 0)))));
    tmp_10_fu_1221_p2 <= "1" when (signed(max_score_4_fu_1217_p1) > signed(max_score_1_reg_1475)) else "0";
    tmp_110_fu_1098_p2 <= (tmp_108_fu_1087_p2 and tmp_109_fu_1092_p2);
    tmp_111_fu_1104_p1 <= tmp_110_fu_1098_p2(2 - 1 downto 0);
        tmp_11_cast_fu_622_p1 <= std_logic_vector(resize(signed(tmp_11_reg_1331),32));

    tmp_11_fu_548_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(j_0_i2_cast_reg_1297));
    tmp_12_fu_625_p1 <= std_logic_vector(resize(unsigned(tmp_11_cast_fu_622_p1),64));
    tmp_13_fu_684_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it2));
    tmp_14_fu_517_p2 <= std_logic_vector(signed(ap_const_lv7_7F) + signed(j_0_i2_reg_284));
    tmp_15_fu_954_p2 <= std_logic_vector(signed(ap_const_lv7_7F) + signed(j_0_i_reg_317));
    tmp_16_fu_1108_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_15_reg_1490_pp1_it2),64));
    tmp_17_fu_960_p2 <= "1" when (j_0_i_reg_317 = ap_const_lv7_1) else "0";
    tmp_18_fu_631_p1 <= std_logic_vector(resize(unsigned(ap_reg_ppstg_tmp_14_reg_1311_pp0_it1),64));
        tmp_19_cast_fu_1066_p1 <= std_logic_vector(resize(signed(ap_reg_ppstg_tmp_19_reg_1502_pp1_it1),32));

    tmp_19_fu_966_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(j_0_i_cast_fu_950_p1));
    tmp_20_fu_1069_p1 <= std_logic_vector(resize(unsigned(tmp_19_cast_fu_1066_p1),64));
    tmp_21_fu_523_p4 <= tmp_14_fu_517_p2(6 downto 2);
    tmp_22_fu_383_p1 <= prev_orig_out_fu_377_p2(2 - 1 downto 0);
    tmp_23_fu_400_p2 <= "1" when (unsigned(tmp_4_fu_387_p3) > unsigned(tmp_9_fu_394_p2)) else "0";
    tmp_24_fu_533_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_523_p4),64));
    tmp_25_fu_406_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_387_p3),4));
    tmp_26_fu_553_p3 <= (tmp_76_reg_1321 & ap_const_lv1_0);
    tmp_27_fu_560_p2 <= (tmp_26_fu_553_p3 or ap_const_lv3_1);
    tmp_28_fu_410_p1 <= std_logic_vector(resize(unsigned(tmp_9_fu_394_p2),4));
    tmp_29_fu_707_p2 <= "1" when (tmp_93_reg_1373 = tmp_57_reg_1275) else "0";
    tmp_30_fu_755_p2 <= "1" when (signed(prev_score_out_8_reg_1408) < signed(prev_score_out_9_fu_748_p3)) else "0";
    tmp_32_fu_760_p2 <= "1" when (signed(prev_score_out_8_reg_1408) < signed(up_score_reg_1416)) else "0";
    tmp_33_fu_770_p2 <= "1" when (signed(prev_score_out_9_fu_748_p3) < signed(prev_score_out_8_reg_1408)) else "0";
    tmp_34_fu_775_p2 <= "1" when (signed(prev_score_out_9_fu_748_p3) < signed(up_score_reg_1416)) else "0";
    tmp_35_fu_972_p4 <= tmp_15_fu_954_p2(6 downto 2);
    tmp_36_fu_982_p1 <= std_logic_vector(resize(unsigned(tmp_35_fu_972_p4),64));
    tmp_38_fu_997_p3 <= (tmp_94_reg_1512 & ap_const_lv1_0);
    tmp_39_fu_1004_p2 <= (tmp_38_fu_997_p3 or ap_const_lv3_1);
    tmp_3_fu_815_p3 <= (tmp_58_fu_811_p1 & ap_const_lv1_0);
    tmp_40_fu_414_p2 <= std_logic_vector(unsigned(tmp_25_fu_406_p1) - unsigned(tmp_28_fu_410_p1));
    tmp_41_fu_1119_p2 <= "1" when (tmp_111_reg_1547 = tmp_75_reg_1481) else "0";
    tmp_42_fu_1161_p2 <= "1" when (signed(prev_score_out_reg_1591) < signed(prev_score_out_10_fu_1154_p3)) else "0";
    tmp_43_fu_1166_p2 <= "1" when (signed(prev_score_out_reg_1591) < signed(up_score_1_reg_1584)) else "0";
    tmp_44_fu_1176_p2 <= "1" when (signed(prev_score_out_10_fu_1154_p3) < signed(prev_score_out_reg_1591)) else "0";
    tmp_45_fu_1181_p2 <= "1" when (signed(prev_score_out_10_fu_1154_p3) < signed(up_score_1_reg_1584)) else "0";
    tmp_46_fu_420_p2 <= (tmp_25_fu_406_p1 xor ap_const_lv4_7);
    tmp_47_fu_426_p2 <= std_logic_vector(unsigned(tmp_28_fu_410_p1) - unsigned(tmp_25_fu_406_p1));
    tmp_48_fu_432_p3 <= 
        tmp_40_fu_414_p2 when (tmp_23_fu_400_p2(0) = '1') else 
        tmp_47_fu_426_p2;
    tmp_49_fu_440_p3 <= 
        grp_fu_351_p4 when (tmp_23_fu_400_p2(0) = '1') else 
        ref_genome_TDATA;
    tmp_4_fu_387_p3 <= (tmp_22_reg_1255 & ap_const_lv1_0);
    tmp_50_fu_448_p3 <= 
        tmp_46_fu_420_p2 when (tmp_23_fu_400_p2(0) = '1') else 
        tmp_25_fu_406_p1;
    tmp_51_fu_456_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(tmp_48_reg_1260));
    tmp_52_fu_461_p1 <= std_logic_vector(resize(unsigned(tmp_50_reg_1270),8));
    tmp_53_fu_464_p1 <= std_logic_vector(resize(unsigned(tmp_51_fu_456_p2),8));
    tmp_54_fu_468_p2 <= std_logic_vector(shift_right(unsigned(tmp_49_reg_1265),to_integer(unsigned('0' & tmp_52_fu_461_p1(8-1 downto 0)))));
    tmp_55_fu_473_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & tmp_53_fu_464_p1(8-1 downto 0)))));
    tmp_56_fu_479_p2 <= (tmp_54_fu_468_p2 and tmp_55_fu_473_p2);
    tmp_57_fu_485_p1 <= tmp_56_fu_479_p2(2 - 1 downto 0);
    tmp_58_fu_811_p1 <= prev_orig_out_1_reg_248(2 - 1 downto 0);
    tmp_59_fu_829_p2 <= "1" when (unsigned(tmp_3_fu_815_p3) > unsigned(tmp_8_fu_823_p2)) else "0";
    tmp_5_fu_489_p2 <= "1" when (prev_orig_out_1_reg_248 = ap_const_lv20_1) else "0";
    tmp_60_fu_835_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_815_p3),4));
    tmp_61_fu_839_p1 <= std_logic_vector(resize(unsigned(tmp_8_fu_823_p2),4));
    tmp_63_fu_843_p2 <= std_logic_vector(unsigned(tmp_60_fu_835_p1) - unsigned(tmp_61_fu_839_p1));
    tmp_64_fu_849_p2 <= (tmp_60_fu_835_p1 xor ap_const_lv4_7);
    tmp_65_fu_855_p2 <= std_logic_vector(unsigned(tmp_61_fu_839_p1) - unsigned(tmp_60_fu_835_p1));
    tmp_66_fu_861_p3 <= 
        tmp_63_fu_843_p2 when (tmp_59_fu_829_p2(0) = '1') else 
        tmp_65_fu_855_p2;
    tmp_67_fu_869_p3 <= 
        grp_fu_351_p4 when (tmp_59_fu_829_p2(0) = '1') else 
        ref_genome_TDATA;
    tmp_68_fu_877_p3 <= 
        tmp_64_fu_849_p2 when (tmp_59_fu_829_p2(0) = '1') else 
        tmp_60_fu_835_p1;
    tmp_69_fu_911_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(tmp_66_reg_1455));
    tmp_6_fu_511_p2 <= "1" when (j_0_i2_reg_284 = ap_const_lv7_1) else "0";
    tmp_70_fu_916_p1 <= std_logic_vector(resize(unsigned(tmp_68_reg_1465),8));
    tmp_71_fu_919_p1 <= std_logic_vector(resize(unsigned(tmp_69_fu_911_p2),8));
    tmp_72_fu_923_p2 <= std_logic_vector(shift_right(unsigned(tmp_67_reg_1460),to_integer(unsigned('0' & tmp_70_fu_916_p1(8-1 downto 0)))));
    tmp_73_fu_928_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & tmp_71_fu_919_p1(8-1 downto 0)))));
    tmp_74_fu_934_p2 <= (tmp_72_fu_923_p2 and tmp_73_fu_928_p2);
    tmp_75_fu_940_p1 <= tmp_74_fu_934_p2(2 - 1 downto 0);
    tmp_76_fu_538_p1 <= tmp_14_fu_517_p2(2 - 1 downto 0);
    tmp_77_fu_566_p2 <= "1" when (unsigned(tmp_26_fu_553_p3) > unsigned(tmp_27_fu_560_p2)) else "0";
    tmp_78_fu_572_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_553_p3),4));
    tmp_79_fu_576_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_560_p2),4));
    tmp_7_fu_889_p2 <= "1" when (signed(max_score_3_fu_885_p1) > signed(max_score_reg_272)) else "0";
    tmp_81_fu_580_p2 <= std_logic_vector(unsigned(tmp_78_fu_572_p1) - unsigned(tmp_79_fu_576_p1));
    tmp_82_fu_586_p2 <= (tmp_78_fu_572_p1 xor ap_const_lv4_7);
    tmp_83_fu_592_p2 <= std_logic_vector(unsigned(tmp_79_fu_576_p1) - unsigned(tmp_78_fu_572_p1));
    tmp_84_fu_598_p3 <= 
        tmp_81_fu_580_p2 when (tmp_77_fu_566_p2(0) = '1') else 
        tmp_83_fu_592_p2;
    tmp_85_fu_606_p3 <= 
        grp_fu_361_p4 when (tmp_77_fu_566_p2(0) = '1') else 
        read_r_Dout_A;
    tmp_86_fu_614_p3 <= 
        tmp_82_fu_586_p2 when (tmp_77_fu_566_p2(0) = '1') else 
        tmp_78_fu_572_p1;
    tmp_87_fu_635_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(tmp_84_reg_1336));
    tmp_88_fu_640_p1 <= std_logic_vector(resize(unsigned(tmp_86_reg_1346),8));
    tmp_89_fu_643_p1 <= std_logic_vector(resize(unsigned(tmp_87_fu_635_p2),8));
    tmp_8_fu_823_p2 <= (tmp_3_fu_815_p3 or ap_const_lv3_1);
    tmp_90_fu_647_p2 <= std_logic_vector(shift_right(unsigned(tmp_85_reg_1341),to_integer(unsigned('0' & tmp_88_fu_640_p1(8-1 downto 0)))));
    tmp_91_fu_652_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv8_FF),to_integer(unsigned('0' & tmp_89_fu_643_p1(8-1 downto 0)))));
    tmp_92_fu_658_p2 <= (tmp_90_fu_647_p2 and tmp_91_fu_652_p2);
    tmp_93_fu_664_p1 <= tmp_92_fu_658_p2(2 - 1 downto 0);
    tmp_94_fu_987_p1 <= tmp_15_fu_954_p2(2 - 1 downto 0);
    tmp_95_fu_1010_p2 <= "1" when (unsigned(tmp_38_fu_997_p3) > unsigned(tmp_39_fu_1004_p2)) else "0";
    tmp_96_fu_1016_p1 <= std_logic_vector(resize(unsigned(tmp_38_fu_997_p3),4));
    tmp_97_fu_1020_p1 <= std_logic_vector(resize(unsigned(tmp_39_fu_1004_p2),4));
    tmp_99_fu_1024_p2 <= std_logic_vector(unsigned(tmp_96_fu_1016_p1) - unsigned(tmp_97_fu_1020_p1));
    tmp_9_fu_394_p2 <= (tmp_4_fu_387_p3 or ap_const_lv3_1);
    tmp_fu_371_p2 <= "1" when (unsigned(prev_orig_out_1_reg_248) < unsigned(ap_const_lv20_F4241)) else "0";
    tmp_s_fu_668_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) - unsigned(ap_reg_ppstg_j_0_i2_cast_reg_1297_pp0_it2));
    up_fu_689_p3 <= 
        tmp_13_fu_684_p2 when (tmp_5_reg_1280(0) = '1') else 
        score1_q1;
    up_orig_fu_735_p3 <= 
        ap_const_lv20_0 when (tmp_5_reg_1280(0) = '1') else 
        orig1_q1;
    up_score_1_fu_1129_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(score2_q1));
    up_score_fu_730_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(up_reg_1388));
end behav;
