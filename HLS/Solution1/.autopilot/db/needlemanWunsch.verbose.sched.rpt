

================================================================
== Vivado HLS Report for 'needlemanWunsch'
================================================================
* Date:           Wed Nov 18 20:20:22 2015

* Version:        2015.2 (Build 1266856 on Fri Jun 26 16:57:37 PM 2015)
* Project:        643_PE
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   5.00|      7.83|        0.63|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----------+-----------+-----------+-----------+---------+
    |        Latency        |        Interval       | Pipeline|
    |    min    |    max    |    min    |    max    |   Type  |
    +-----------+-----------+-----------+-----------+---------+
    |  110000001|  110000001|  110000002|  110000002|   none  |
    +-----------+-----------+-----------+-----------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----------+-----------+----------+-----------+-----------+--------+----------+
        |          |        Latency        | Iteration|  Initiation Interval  |  Trip  |          |
        | Loop Name|    min    |    max    |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------+-----------+-----------+----------+-----------+-----------+--------+----------+
        |- ROW     |  110000000|  110000000|       220|          -|          -|  500000|    no    |
        | + COL    |        106|        106|         8|          1|          1|     100|    yes   |
        | + COL    |        106|        106|         8|          1|          1|     100|    yes   |
        +----------+-----------+-----------+----------+-----------+-----------+--------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
+------------------------+-----+-----+---------+--------------+--------------+
|        RTL Ports       | Dir | Bits| Protocol| Source Object|    C Type    |
+------------------------+-----+-----+---------+--------------+--------------+
|s_axi_AXILiteS_AWVALID  |  in |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_AWREADY  | out |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_AWADDR   |  in |    5|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_WVALID   |  in |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_WREADY   | out |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_WDATA    |  in |   32|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_WSTRB    |  in |    4|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_ARVALID  |  in |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_ARREADY  | out |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_ARADDR   |  in |    5|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_RVALID   | out |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_RREADY   |  in |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_RDATA    | out |   32|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_RRESP    | out |    2|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_BVALID   | out |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_BREADY   |  in |    1|  s_axi  |   AXILiteS   | return value |
|s_axi_AXILiteS_BRESP    | out |    2|  s_axi  |   AXILiteS   | return value |
+------------------------+-----+-----+---------+--------------+--------------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 8
  * Pipeline-1: initiation interval (II) = 1, depth = 8


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 23
* Pipeline: 2
  Pipeline-0: II = 1, D = 8, States = { 5 6 7 8 9 10 11 12 }
  Pipeline-1: II = 1, D = 8, States = { 15 16 17 18 19 20 21 22 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / (tmp)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	13  / (exitcond_i5)
	6  / (!exitcond_i5)
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	5  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	23  / (exitcond_i)
	16  / (!exitcond_i)
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	15  / true
23 --> 
	2  / true
* FSM state operations: 

 <State 1>: 1.57ns
ST_1: stg_24 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([25 x i8]* %read_r), !map !0

ST_1: stg_25 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap(i8* %ref_genome), !map !21

ST_1: stg_26 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i20 0) nounwind, !map !42

ST_1: stg_27 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecTopModule([16 x i8]* @needlemanWunsch_str) nounwind

ST_1: score1 [1/1] 0.00ns
:4  %score1 = alloca [100 x i8], align 16

ST_1: score2 [1/1] 0.00ns
:5  %score2 = alloca [100 x i8], align 16

ST_1: orig1 [1/1] 0.00ns
:6  %orig1 = alloca [100 x i20], align 16

ST_1: orig2 [1/1] 0.00ns
:7  %orig2 = alloca [100 x i20], align 16

ST_1: stg_32 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecInterface([25 x i8]* %read_r, [5 x i8]* @p_str3, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: stg_33 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str4, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str) nounwind

ST_1: stg_34 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecInterface(i8* %ref_genome, [5 x i8]* @p_str5, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str, [1 x i8]* @p_str, [1 x i8]* @p_str)

ST_1: stg_35 [1/1] 1.57ns
:11  br label %1


 <State 2>: 3.71ns
ST_2: prev_orig_out_1 [1/1] 0.00ns
:0  %prev_orig_out_1 = phi i20 [ 1, %0 ], [ %i, %doRow.exit ]

ST_2: max_orig [1/1] 0.00ns
:1  %max_orig = phi i20 [ 0, %0 ], [ %max_orig_2, %doRow.exit ]

ST_2: max_score [1/1] 0.00ns
:2  %max_score = phi i32 [ -100, %0 ], [ %max_score_2, %doRow.exit ]

ST_2: tmp [1/1] 2.34ns
:3  %tmp = icmp ult i20 %prev_orig_out_1, -48575

ST_2: stg_40 [1/1] 0.00ns
:4  br i1 %tmp, label %._crit_edge, label %4

ST_2: prev_orig_out [1/1] 2.08ns
._crit_edge:3  %prev_orig_out = add i20 -1, %prev_orig_out_1

ST_2: tmp_22 [1/1] 0.00ns
._crit_edge:5  %tmp_22 = trunc i20 %prev_orig_out to i2

ST_2: stg_43 [1/1] 0.00ns
:0  ret i20 %max_orig


 <State 3>: 2.99ns
ST_3: ref_genome_read [1/1] 0.00ns
._crit_edge:4  %ref_genome_read = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %ref_genome)

ST_3: tmp_4 [1/1] 0.00ns
._crit_edge:6  %tmp_4 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %tmp_22, i1 false)

ST_3: tmp_9 [1/1] 0.00ns
._crit_edge:7  %tmp_9 = or i3 %tmp_4, 1

ST_3: tmp_23 [1/1] 1.62ns
._crit_edge:8  %tmp_23 = icmp ugt i3 %tmp_4, %tmp_9

ST_3: tmp_25 [1/1] 0.00ns
._crit_edge:9  %tmp_25 = zext i3 %tmp_4 to i4

ST_3: tmp_28 [1/1] 0.00ns
._crit_edge:10  %tmp_28 = zext i3 %tmp_9 to i4

ST_3: tmp_37 [1/1] 0.00ns
._crit_edge:11  %tmp_37 = call i8 @llvm.part.select.i8(i8 %ref_genome_read, i32 7, i32 0)

ST_3: tmp_40 [1/1] 0.80ns
._crit_edge:12  %tmp_40 = sub i4 %tmp_25, %tmp_28

ST_3: tmp_46 [1/1] 1.37ns
._crit_edge:13  %tmp_46 = xor i4 %tmp_25, 7

ST_3: tmp_47 [1/1] 0.80ns
._crit_edge:14  %tmp_47 = sub i4 %tmp_28, %tmp_25

ST_3: tmp_48 [1/1] 1.37ns
._crit_edge:15  %tmp_48 = select i1 %tmp_23, i4 %tmp_40, i4 %tmp_47

ST_3: tmp_49 [1/1] 1.37ns
._crit_edge:16  %tmp_49 = select i1 %tmp_23, i8 %tmp_37, i8 %ref_genome_read

ST_3: tmp_50 [1/1] 1.37ns
._crit_edge:17  %tmp_50 = select i1 %tmp_23, i4 %tmp_46, i4 %tmp_25


 <State 4>: 3.71ns
ST_4: empty [1/1] 0.00ns
._crit_edge:0  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 500000, i64 500000, i64 500000) nounwind

ST_4: stg_58 [1/1] 0.00ns
._crit_edge:1  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str6) nounwind

ST_4: tmp_2 [1/1] 0.00ns
._crit_edge:2  %tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str6) nounwind

ST_4: tmp_51 [1/1] 0.80ns
._crit_edge:18  %tmp_51 = sub i4 7, %tmp_48

ST_4: tmp_52 [1/1] 0.00ns
._crit_edge:19  %tmp_52 = zext i4 %tmp_50 to i8

ST_4: tmp_53 [1/1] 0.00ns
._crit_edge:20  %tmp_53 = zext i4 %tmp_51 to i8

ST_4: tmp_54 [1/1] 2.01ns
._crit_edge:21  %tmp_54 = lshr i8 %tmp_49, %tmp_52

ST_4: tmp_55 [1/1] 1.18ns
._crit_edge:22  %tmp_55 = lshr i8 -1, %tmp_53

ST_4: tmp_56 [1/1] 1.37ns
._crit_edge:23  %tmp_56 = and i8 %tmp_54, %tmp_55

ST_4: tmp_57 [1/1] 0.00ns
._crit_edge:24  %tmp_57 = trunc i8 %tmp_56 to i2

ST_4: tmp_5 [1/1] 2.34ns
._crit_edge:25  %tmp_5 = icmp eq i20 %prev_orig_out_1, 1

ST_4: sel_tmp1 [1/1] 1.37ns
._crit_edge:26  %sel_tmp1 = xor i1 %tmp_5, true

ST_4: stg_69 [1/1] 1.57ns
._crit_edge:27  br label %2


 <State 5>: 4.11ns
ST_5: j_0_i2 [1/1] 0.00ns
:0  %j_0_i2 = phi i7 [ 1, %._crit_edge ], [ %j, %_ifconv ]

ST_5: score_out1 [1/1] 0.00ns
:1  %score_out1 = phi i8 [ 0, %._crit_edge ], [ %prev_score_out_3, %_ifconv ]

ST_5: prev_orig_out_12 [1/1] 0.00ns
:2  %prev_orig_out_12 = phi i20 [ %prev_orig_out, %._crit_edge ], [ %prev_orig_out_7, %_ifconv ]

ST_5: exitcond_i5 [1/1] 1.97ns
:3  %exitcond_i5 = icmp eq i7 %j_0_i2, -27

ST_5: stg_74 [1/1] 0.00ns
:4  br i1 %exitcond_i5, label %doRow.exit27, label %_ifconv

ST_5: j_0_i2_cast [1/1] 0.00ns
_ifconv:0  %j_0_i2_cast = zext i7 %j_0_i2 to i8

ST_5: tmp_6 [1/1] 1.97ns
_ifconv:6  %tmp_6 = icmp eq i7 %j_0_i2, 1

ST_5: tmp_14 [1/1] 1.72ns
_ifconv:16  %tmp_14 = add i7 -1, %j_0_i2

ST_5: tmp_21 [1/1] 0.00ns
_ifconv:28  %tmp_21 = call i5 @_ssdm_op_PartSelect.i5.i7.i32.i32(i7 %tmp_14, i32 2, i32 6)

ST_5: tmp_24 [1/1] 0.00ns
_ifconv:29  %tmp_24 = zext i5 %tmp_21 to i64

ST_5: read_addr_1 [1/1] 0.00ns
_ifconv:30  %read_addr_1 = getelementptr [25 x i8]* %read_r, i64 0, i64 %tmp_24

ST_5: read_load_1 [2/2] 2.39ns
_ifconv:31  %read_load_1 = load i8* %read_addr_1, align 1

ST_5: tmp_76 [1/1] 0.00ns
_ifconv:32  %tmp_76 = trunc i7 %tmp_14 to i2

ST_5: j [1/1] 1.72ns
_ifconv:73  %j = add i7 1, %j_0_i2


 <State 6>: 3.76ns
ST_6: tmp_11 [1/1] 1.72ns
_ifconv:7  %tmp_11 = add i8 -2, %j_0_i2_cast

ST_6: read_load_1 [1/2] 2.39ns
_ifconv:31  %read_load_1 = load i8* %read_addr_1, align 1

ST_6: tmp_26 [1/1] 0.00ns
_ifconv:33  %tmp_26 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %tmp_76, i1 false)

ST_6: tmp_27 [1/1] 0.00ns
_ifconv:34  %tmp_27 = or i3 %tmp_26, 1

ST_6: tmp_77 [1/1] 1.62ns
_ifconv:35  %tmp_77 = icmp ugt i3 %tmp_26, %tmp_27

ST_6: tmp_78 [1/1] 0.00ns
_ifconv:36  %tmp_78 = zext i3 %tmp_26 to i4

ST_6: tmp_79 [1/1] 0.00ns
_ifconv:37  %tmp_79 = zext i3 %tmp_27 to i4

ST_6: tmp_80 [1/1] 0.00ns
_ifconv:38  %tmp_80 = call i8 @llvm.part.select.i8(i8 %read_load_1, i32 7, i32 0)

ST_6: tmp_81 [1/1] 0.80ns
_ifconv:39  %tmp_81 = sub i4 %tmp_78, %tmp_79

ST_6: tmp_82 [1/1] 1.37ns
_ifconv:40  %tmp_82 = xor i4 %tmp_78, 7

ST_6: tmp_83 [1/1] 0.80ns
_ifconv:41  %tmp_83 = sub i4 %tmp_79, %tmp_78

ST_6: tmp_84 [1/1] 1.37ns
_ifconv:42  %tmp_84 = select i1 %tmp_77, i4 %tmp_81, i4 %tmp_83

ST_6: tmp_85 [1/1] 1.37ns
_ifconv:43  %tmp_85 = select i1 %tmp_77, i8 %tmp_80, i8 %read_load_1

ST_6: tmp_86 [1/1] 1.37ns
_ifconv:44  %tmp_86 = select i1 %tmp_77, i4 %tmp_82, i4 %tmp_78


 <State 7>: 3.38ns
ST_7: tmp_11_cast [1/1] 0.00ns
_ifconv:8  %tmp_11_cast = sext i8 %tmp_11 to i32

ST_7: tmp_12 [1/1] 0.00ns
_ifconv:9  %tmp_12 = zext i32 %tmp_11_cast to i64

ST_7: score1_addr [1/1] 0.00ns
_ifconv:10  %score1_addr = getelementptr inbounds [100 x i8]* %score1, i64 0, i64 %tmp_12

ST_7: score1_load [2/2] 2.39ns
_ifconv:11  %score1_load = load i8* %score1_addr, align 1

ST_7: tmp_18 [1/1] 0.00ns
_ifconv:17  %tmp_18 = zext i7 %tmp_14 to i64

ST_7: score1_addr_1 [1/1] 0.00ns
_ifconv:18  %score1_addr_1 = getelementptr inbounds [100 x i8]* %score1, i64 0, i64 %tmp_18

ST_7: score1_load_1 [2/2] 2.39ns
_ifconv:19  %score1_load_1 = load i8* %score1_addr_1, align 1

ST_7: orig1_addr [1/1] 0.00ns
_ifconv:22  %orig1_addr = getelementptr inbounds [100 x i20]* %orig1, i64 0, i64 %tmp_12

ST_7: orig1_load [2/2] 2.71ns
_ifconv:23  %orig1_load = load i20* %orig1_addr, align 4

ST_7: tmp_87 [1/1] 0.80ns
_ifconv:45  %tmp_87 = sub i4 7, %tmp_84

ST_7: tmp_88 [1/1] 0.00ns
_ifconv:46  %tmp_88 = zext i4 %tmp_86 to i8

ST_7: tmp_89 [1/1] 0.00ns
_ifconv:47  %tmp_89 = zext i4 %tmp_87 to i8

ST_7: tmp_90 [1/1] 2.01ns
_ifconv:48  %tmp_90 = lshr i8 %tmp_85, %tmp_88

ST_7: tmp_91 [1/1] 1.18ns
_ifconv:49  %tmp_91 = lshr i8 -1, %tmp_89

ST_7: tmp_92 [1/1] 1.37ns
_ifconv:50  %tmp_92 = and i8 %tmp_90, %tmp_91

ST_7: tmp_93 [1/1] 0.00ns
_ifconv:51  %tmp_93 = trunc i8 %tmp_92 to i2


 <State 8>: 4.08ns
ST_8: tmp_s [1/1] 1.72ns
_ifconv:5  %tmp_s = sub i8 1, %j_0_i2_cast

ST_8: score1_load [1/2] 2.39ns
_ifconv:11  %score1_load = load i8* %score1_addr, align 1

ST_8: sel_tmp [1/1] 1.37ns
_ifconv:12  %sel_tmp = select i1 %tmp_5, i8 %tmp_s, i8 %score1_load

ST_8: sel_tmp2 [1/1] 1.37ns
_ifconv:13  %sel_tmp2 = and i1 %tmp_6, %sel_tmp1

ST_8: tmp_13 [1/1] 1.72ns
_ifconv:15  %tmp_13 = sub i8 0, %j_0_i2_cast

ST_8: score1_load_1 [1/2] 2.39ns
_ifconv:19  %score1_load_1 = load i8* %score1_addr_1, align 1

ST_8: up [1/1] 1.37ns
_ifconv:20  %up = select i1 %tmp_5, i8 %tmp_13, i8 %score1_load_1

ST_8: brmerge_i1 [1/1] 1.37ns
_ifconv:21  %brmerge_i1 = or i1 %tmp_5, %tmp_6

ST_8: orig1_load [1/2] 2.71ns
_ifconv:23  %orig1_load = load i20* %orig1_addr, align 4

ST_8: prev_orig_out_13 [1/1] 1.37ns
_ifconv:24  %prev_orig_out_13 = select i1 %brmerge_i1, i20 %prev_orig_out, i20 %orig1_load

ST_8: tmp_29 [1/1] 1.36ns
_ifconv:52  %tmp_29 = icmp eq i2 %tmp_93, %tmp_57


 <State 9>: 3.09ns
ST_9: diag [1/1] 1.37ns
_ifconv:14  %diag = select i1 %sel_tmp2, i8 0, i8 %sel_tmp

ST_9: orig1_addr_2 [1/1] 0.00ns
_ifconv:25  %orig1_addr_2 = getelementptr inbounds [100 x i20]* %orig1, i64 0, i64 %tmp_18

ST_9: orig1_load_1 [2/2] 2.71ns
_ifconv:26  %orig1_load_1 = load i20* %orig1_addr_2, align 4

ST_9: diag_score_0_v_i1_cast_cast [1/1] 1.37ns
_ifconv:53  %diag_score_0_v_i1_cast_cast = select i1 %tmp_29, i8 1, i8 -1

ST_9: prev_score_out_8 [1/1] 1.72ns
_ifconv:54  %prev_score_out_8 = add i8 %diag_score_0_v_i1_cast_cast, %diag

ST_9: up_score [1/1] 1.72ns
_ifconv:57  %up_score = add i8 -1, %up


 <State 10>: 7.83ns
ST_10: orig1_load_1 [1/2] 2.71ns
_ifconv:26  %orig1_load_1 = load i20* %orig1_addr_2, align 4

ST_10: up_orig [1/1] 1.37ns
_ifconv:27  %up_orig = select i1 %tmp_5, i20 0, i20 %orig1_load_1

ST_10: prev_score_out_0_op_i1 [1/1] 1.72ns
_ifconv:55  %prev_score_out_0_op_i1 = add i8 -1, %score_out1

ST_10: prev_score_out_9 [1/1] 1.37ns
_ifconv:56  %prev_score_out_9 = select i1 %tmp_6, i8 -1, i8 %prev_score_out_0_op_i1

ST_10: tmp_30 [1/1] 2.00ns
_ifconv:58  %tmp_30 = icmp slt i8 %prev_score_out_8, %prev_score_out_9

ST_10: tmp_32 [1/1] 2.00ns
_ifconv:59  %tmp_32 = icmp slt i8 %prev_score_out_8, %up_score

ST_10: or_cond_i1 [1/1] 1.37ns
_ifconv:60  %or_cond_i1 = or i1 %tmp_30, %tmp_32

ST_10: tmp_33 [1/1] 2.00ns
_ifconv:61  %tmp_33 = icmp slt i8 %prev_score_out_9, %prev_score_out_8

ST_10: tmp_34 [1/1] 2.00ns
_ifconv:62  %tmp_34 = icmp slt i8 %prev_score_out_9, %up_score

ST_10: or_cond1_i1 [1/1] 1.37ns
_ifconv:63  %or_cond1_i1 = or i1 %tmp_33, %tmp_34

ST_10: prev_score_out_1 [1/1] 1.37ns
_ifconv:64  %prev_score_out_1 = select i1 %or_cond1_i1, i8 %up_score, i8 %prev_score_out_9


 <State 11>: 3.76ns
ST_11: prev_orig_out_5 [1/1] 1.37ns
_ifconv:65  %prev_orig_out_5 = select i1 %or_cond1_i1, i20 %up_orig, i20 %prev_orig_out_12

ST_11: prev_score_out_3 [1/1] 1.37ns
_ifconv:66  %prev_score_out_3 = select i1 %or_cond_i1, i8 %prev_score_out_1, i8 %prev_score_out_8

ST_11: prev_orig_out_7 [1/1] 1.37ns
_ifconv:67  %prev_orig_out_7 = select i1 %or_cond_i1, i20 %prev_orig_out_5, i20 %prev_orig_out_13

ST_11: score2_addr_2 [1/1] 0.00ns
_ifconv:68  %score2_addr_2 = getelementptr inbounds [100 x i8]* %score2, i64 0, i64 %tmp_18

ST_11: stg_146 [1/1] 2.39ns
_ifconv:69  store i8 %prev_score_out_3, i8* %score2_addr_2, align 1


 <State 12>: 2.71ns
ST_12: empty_7 [1/1] 0.00ns
_ifconv:1  %empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100) nounwind

ST_12: stg_148 [1/1] 0.00ns
_ifconv:2  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str1) nounwind

ST_12: tmp_1 [1/1] 0.00ns
_ifconv:3  %tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str1) nounwind

ST_12: stg_150 [1/1] 0.00ns
_ifconv:4  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_12: orig2_addr_2 [1/1] 0.00ns
_ifconv:70  %orig2_addr_2 = getelementptr inbounds [100 x i20]* %orig2, i64 0, i64 %tmp_18

ST_12: stg_152 [1/1] 2.71ns
_ifconv:71  store i20 %prev_orig_out_7, i20* %orig2_addr_2, align 4

ST_12: empty_8 [1/1] 0.00ns
_ifconv:72  %empty_8 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str1, i32 %tmp_1) nounwind

ST_12: stg_154 [1/1] 0.00ns
_ifconv:74  br label %2


 <State 13>: 2.99ns
ST_13: ref_genome_read_1 [1/1] 0.00ns
doRow.exit27:4  %ref_genome_read_1 = call i8 @_ssdm_op_Read.axis.volatile.i8P(i8* %ref_genome)

ST_13: tmp_58 [1/1] 0.00ns
doRow.exit27:5  %tmp_58 = trunc i20 %prev_orig_out_1 to i2

ST_13: tmp_3 [1/1] 0.00ns
doRow.exit27:6  %tmp_3 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %tmp_58, i1 false)

ST_13: tmp_8 [1/1] 0.00ns
doRow.exit27:7  %tmp_8 = or i3 %tmp_3, 1

ST_13: tmp_59 [1/1] 1.62ns
doRow.exit27:8  %tmp_59 = icmp ugt i3 %tmp_3, %tmp_8

ST_13: tmp_60 [1/1] 0.00ns
doRow.exit27:9  %tmp_60 = zext i3 %tmp_3 to i4

ST_13: tmp_61 [1/1] 0.00ns
doRow.exit27:10  %tmp_61 = zext i3 %tmp_8 to i4

ST_13: tmp_62 [1/1] 0.00ns
doRow.exit27:11  %tmp_62 = call i8 @llvm.part.select.i8(i8 %ref_genome_read_1, i32 7, i32 0)

ST_13: tmp_63 [1/1] 0.80ns
doRow.exit27:12  %tmp_63 = sub i4 %tmp_60, %tmp_61

ST_13: tmp_64 [1/1] 1.37ns
doRow.exit27:13  %tmp_64 = xor i4 %tmp_60, 7

ST_13: tmp_65 [1/1] 0.80ns
doRow.exit27:14  %tmp_65 = sub i4 %tmp_61, %tmp_60

ST_13: tmp_66 [1/1] 1.37ns
doRow.exit27:15  %tmp_66 = select i1 %tmp_59, i4 %tmp_63, i4 %tmp_65

ST_13: tmp_67 [1/1] 1.37ns
doRow.exit27:16  %tmp_67 = select i1 %tmp_59, i8 %tmp_62, i8 %ref_genome_read_1

ST_13: tmp_68 [1/1] 1.37ns
doRow.exit27:17  %tmp_68 = select i1 %tmp_59, i4 %tmp_64, i4 %tmp_60


 <State 14>: 3.89ns
ST_14: max_score_3 [1/1] 0.00ns
doRow.exit27:0  %max_score_3 = sext i8 %score_out1 to i32

ST_14: tmp_7 [1/1] 2.52ns
doRow.exit27:1  %tmp_7 = icmp sgt i32 %max_score_3, %max_score

ST_14: max_orig_1 [1/1] 1.37ns
doRow.exit27:2  %max_orig_1 = select i1 %tmp_7, i20 %prev_orig_out_12, i20 %max_orig

ST_14: max_score_1 [1/1] 1.37ns
doRow.exit27:3  %max_score_1 = select i1 %tmp_7, i32 %max_score_3, i32 %max_score

ST_14: tmp_69 [1/1] 0.80ns
doRow.exit27:18  %tmp_69 = sub i4 7, %tmp_66

ST_14: tmp_70 [1/1] 0.00ns
doRow.exit27:19  %tmp_70 = zext i4 %tmp_68 to i8

ST_14: tmp_71 [1/1] 0.00ns
doRow.exit27:20  %tmp_71 = zext i4 %tmp_69 to i8

ST_14: tmp_72 [1/1] 2.01ns
doRow.exit27:21  %tmp_72 = lshr i8 %tmp_67, %tmp_70

ST_14: tmp_73 [1/1] 1.18ns
doRow.exit27:22  %tmp_73 = lshr i8 -1, %tmp_71

ST_14: tmp_74 [1/1] 1.37ns
doRow.exit27:23  %tmp_74 = and i8 %tmp_72, %tmp_73

ST_14: tmp_75 [1/1] 0.00ns
doRow.exit27:24  %tmp_75 = trunc i8 %tmp_74 to i2

ST_14: stg_180 [1/1] 1.57ns
doRow.exit27:25  br label %3


 <State 15>: 4.11ns
ST_15: j_0_i [1/1] 0.00ns
:0  %j_0_i = phi i7 [ 1, %doRow.exit27 ], [ %j_1, %._crit_edge.i_ifconv ]

ST_15: score_out2 [1/1] 0.00ns
:1  %score_out2 = phi i8 [ 0, %doRow.exit27 ], [ %prev_score_out_7, %._crit_edge.i_ifconv ]

ST_15: prev_orig_out_14 [1/1] 0.00ns
:2  %prev_orig_out_14 = phi i20 [ %prev_orig_out_1, %doRow.exit27 ], [ %prev_orig_out_11, %._crit_edge.i_ifconv ]

ST_15: exitcond_i [1/1] 1.97ns
:3  %exitcond_i = icmp eq i7 %j_0_i, -27

ST_15: stg_185 [1/1] 0.00ns
:4  br i1 %exitcond_i, label %doRow.exit, label %._crit_edge.i_ifconv

ST_15: j_0_i_cast [1/1] 0.00ns
._crit_edge.i_ifconv:0  %j_0_i_cast = zext i7 %j_0_i to i8

ST_15: tmp_15 [1/1] 1.72ns
._crit_edge.i_ifconv:5  %tmp_15 = add i7 -1, %j_0_i

ST_15: tmp_17 [1/1] 1.97ns
._crit_edge.i_ifconv:11  %tmp_17 = icmp eq i7 %j_0_i, 1

ST_15: tmp_19 [1/1] 1.72ns
._crit_edge.i_ifconv:12  %tmp_19 = add i8 -2, %j_0_i_cast

ST_15: tmp_35 [1/1] 0.00ns
._crit_edge.i_ifconv:22  %tmp_35 = call i5 @_ssdm_op_PartSelect.i5.i7.i32.i32(i7 %tmp_15, i32 2, i32 6)

ST_15: tmp_36 [1/1] 0.00ns
._crit_edge.i_ifconv:23  %tmp_36 = zext i5 %tmp_35 to i64

ST_15: read_addr [1/1] 0.00ns
._crit_edge.i_ifconv:24  %read_addr = getelementptr [25 x i8]* %read_r, i64 0, i64 %tmp_36

ST_15: read_load [2/2] 2.39ns
._crit_edge.i_ifconv:25  %read_load = load i8* %read_addr, align 1

ST_15: tmp_94 [1/1] 0.00ns
._crit_edge.i_ifconv:26  %tmp_94 = trunc i7 %tmp_15 to i2

ST_15: j_1 [1/1] 1.72ns
._crit_edge.i_ifconv:66  %j_1 = add i7 1, %j_0_i


 <State 16>: 3.76ns
ST_16: read_load [1/2] 2.39ns
._crit_edge.i_ifconv:25  %read_load = load i8* %read_addr, align 1

ST_16: tmp_38 [1/1] 0.00ns
._crit_edge.i_ifconv:27  %tmp_38 = call i3 @_ssdm_op_BitConcatenate.i3.i2.i1(i2 %tmp_94, i1 false)

ST_16: tmp_39 [1/1] 0.00ns
._crit_edge.i_ifconv:28  %tmp_39 = or i3 %tmp_38, 1

ST_16: tmp_95 [1/1] 1.62ns
._crit_edge.i_ifconv:29  %tmp_95 = icmp ugt i3 %tmp_38, %tmp_39

ST_16: tmp_96 [1/1] 0.00ns
._crit_edge.i_ifconv:30  %tmp_96 = zext i3 %tmp_38 to i4

ST_16: tmp_97 [1/1] 0.00ns
._crit_edge.i_ifconv:31  %tmp_97 = zext i3 %tmp_39 to i4

ST_16: tmp_98 [1/1] 0.00ns
._crit_edge.i_ifconv:32  %tmp_98 = call i8 @llvm.part.select.i8(i8 %read_load, i32 7, i32 0)

ST_16: tmp_99 [1/1] 0.80ns
._crit_edge.i_ifconv:33  %tmp_99 = sub i4 %tmp_96, %tmp_97

ST_16: tmp_100 [1/1] 1.37ns
._crit_edge.i_ifconv:34  %tmp_100 = xor i4 %tmp_96, 7

ST_16: tmp_101 [1/1] 0.80ns
._crit_edge.i_ifconv:35  %tmp_101 = sub i4 %tmp_97, %tmp_96

ST_16: tmp_102 [1/1] 1.37ns
._crit_edge.i_ifconv:36  %tmp_102 = select i1 %tmp_95, i4 %tmp_99, i4 %tmp_101

ST_16: tmp_103 [1/1] 1.37ns
._crit_edge.i_ifconv:37  %tmp_103 = select i1 %tmp_95, i8 %tmp_98, i8 %read_load

ST_16: tmp_104 [1/1] 1.37ns
._crit_edge.i_ifconv:38  %tmp_104 = select i1 %tmp_95, i4 %tmp_100, i4 %tmp_96


 <State 17>: 3.38ns
ST_17: tmp_19_cast [1/1] 0.00ns
._crit_edge.i_ifconv:13  %tmp_19_cast = sext i8 %tmp_19 to i32

ST_17: tmp_20 [1/1] 0.00ns
._crit_edge.i_ifconv:14  %tmp_20 = zext i32 %tmp_19_cast to i64

ST_17: score2_addr_1 [1/1] 0.00ns
._crit_edge.i_ifconv:15  %score2_addr_1 = getelementptr inbounds [100 x i8]* %score2, i64 0, i64 %tmp_20

ST_17: score2_load_1 [2/2] 2.39ns
._crit_edge.i_ifconv:16  %score2_load_1 = load i8* %score2_addr_1, align 1

ST_17: orig2_addr_1 [1/1] 0.00ns
._crit_edge.i_ifconv:19  %orig2_addr_1 = getelementptr inbounds [100 x i20]* %orig2, i64 0, i64 %tmp_20

ST_17: orig2_load_1 [2/2] 2.71ns
._crit_edge.i_ifconv:20  %orig2_load_1 = load i20* %orig2_addr_1, align 4

ST_17: tmp_105 [1/1] 0.80ns
._crit_edge.i_ifconv:39  %tmp_105 = sub i4 7, %tmp_102

ST_17: tmp_106 [1/1] 0.00ns
._crit_edge.i_ifconv:40  %tmp_106 = zext i4 %tmp_104 to i8

ST_17: tmp_107 [1/1] 0.00ns
._crit_edge.i_ifconv:41  %tmp_107 = zext i4 %tmp_105 to i8

ST_17: tmp_108 [1/1] 2.01ns
._crit_edge.i_ifconv:42  %tmp_108 = lshr i8 %tmp_103, %tmp_106

ST_17: tmp_109 [1/1] 1.18ns
._crit_edge.i_ifconv:43  %tmp_109 = lshr i8 -1, %tmp_107

ST_17: tmp_110 [1/1] 1.37ns
._crit_edge.i_ifconv:44  %tmp_110 = and i8 %tmp_108, %tmp_109

ST_17: tmp_111 [1/1] 0.00ns
._crit_edge.i_ifconv:45  %tmp_111 = trunc i8 %tmp_110 to i2


 <State 18>: 4.08ns
ST_18: tmp_16 [1/1] 0.00ns
._crit_edge.i_ifconv:6  %tmp_16 = zext i7 %tmp_15 to i64

ST_18: score2_addr [1/1] 0.00ns
._crit_edge.i_ifconv:7  %score2_addr = getelementptr inbounds [100 x i8]* %score2, i64 0, i64 %tmp_16

ST_18: score2_load [2/2] 2.39ns
._crit_edge.i_ifconv:8  %score2_load = load i8* %score2_addr, align 1

ST_18: score2_load_1 [1/2] 2.39ns
._crit_edge.i_ifconv:16  %score2_load_1 = load i8* %score2_addr_1, align 1

ST_18: orig2_load_1 [1/2] 2.71ns
._crit_edge.i_ifconv:20  %orig2_load_1 = load i20* %orig2_addr_1, align 4

ST_18: prev_orig_out_15 [1/1] 1.37ns
._crit_edge.i_ifconv:21  %prev_orig_out_15 = select i1 %tmp_17, i20 %prev_orig_out_1, i20 %orig2_load_1

ST_18: tmp_41 [1/1] 1.36ns
._crit_edge.i_ifconv:46  %tmp_41 = icmp eq i2 %tmp_111, %tmp_75


 <State 19>: 4.11ns
ST_19: score2_load [1/2] 2.39ns
._crit_edge.i_ifconv:8  %score2_load = load i8* %score2_addr, align 1

ST_19: orig2_addr [1/1] 0.00ns
._crit_edge.i_ifconv:9  %orig2_addr = getelementptr inbounds [100 x i20]* %orig2, i64 0, i64 %tmp_16

ST_19: up_orig_1 [2/2] 2.71ns
._crit_edge.i_ifconv:10  %up_orig_1 = load i20* %orig2_addr, align 4

ST_19: diag_1 [1/1] 1.37ns
._crit_edge.i_ifconv:17  %diag_1 = select i1 %tmp_17, i8 0, i8 %score2_load_1

ST_19: up_score_1 [1/1] 1.72ns
._crit_edge.i_ifconv:18  %up_score_1 = add i8 -1, %score2_load

ST_19: diag_score_0_v_i_cast_cast [1/1] 1.37ns
._crit_edge.i_ifconv:47  %diag_score_0_v_i_cast_cast = select i1 %tmp_41, i8 1, i8 -1

ST_19: prev_score_out [1/1] 1.72ns
._crit_edge.i_ifconv:48  %prev_score_out = add i8 %diag_score_0_v_i_cast_cast, %diag_1


 <State 20>: 7.83ns
ST_20: up_orig_1 [1/2] 2.71ns
._crit_edge.i_ifconv:10  %up_orig_1 = load i20* %orig2_addr, align 4

ST_20: prev_score_out_0_op_i [1/1] 1.72ns
._crit_edge.i_ifconv:49  %prev_score_out_0_op_i = add i8 -1, %score_out2

ST_20: prev_score_out_10 [1/1] 1.37ns
._crit_edge.i_ifconv:50  %prev_score_out_10 = select i1 %tmp_17, i8 -1, i8 %prev_score_out_0_op_i

ST_20: tmp_42 [1/1] 2.00ns
._crit_edge.i_ifconv:51  %tmp_42 = icmp slt i8 %prev_score_out, %prev_score_out_10

ST_20: tmp_43 [1/1] 2.00ns
._crit_edge.i_ifconv:52  %tmp_43 = icmp slt i8 %prev_score_out, %up_score_1

ST_20: or_cond_i [1/1] 1.37ns
._crit_edge.i_ifconv:53  %or_cond_i = or i1 %tmp_42, %tmp_43

ST_20: tmp_44 [1/1] 2.00ns
._crit_edge.i_ifconv:54  %tmp_44 = icmp slt i8 %prev_score_out_10, %prev_score_out

ST_20: tmp_45 [1/1] 2.00ns
._crit_edge.i_ifconv:55  %tmp_45 = icmp slt i8 %prev_score_out_10, %up_score_1

ST_20: or_cond1_i [1/1] 1.37ns
._crit_edge.i_ifconv:56  %or_cond1_i = or i1 %tmp_44, %tmp_45

ST_20: prev_score_out_2 [1/1] 1.37ns
._crit_edge.i_ifconv:57  %prev_score_out_2 = select i1 %or_cond1_i, i8 %up_score_1, i8 %prev_score_out_10


 <State 21>: 3.76ns
ST_21: prev_orig_out_6 [1/1] 1.37ns
._crit_edge.i_ifconv:58  %prev_orig_out_6 = select i1 %or_cond1_i, i20 %up_orig_1, i20 %prev_orig_out_14

ST_21: prev_score_out_7 [1/1] 1.37ns
._crit_edge.i_ifconv:59  %prev_score_out_7 = select i1 %or_cond_i, i8 %prev_score_out_2, i8 %prev_score_out

ST_21: prev_orig_out_11 [1/1] 1.37ns
._crit_edge.i_ifconv:60  %prev_orig_out_11 = select i1 %or_cond_i, i20 %prev_orig_out_6, i20 %prev_orig_out_15

ST_21: score1_addr_2 [1/1] 0.00ns
._crit_edge.i_ifconv:61  %score1_addr_2 = getelementptr inbounds [100 x i8]* %score1, i64 0, i64 %tmp_16

ST_21: stg_250 [1/1] 2.39ns
._crit_edge.i_ifconv:62  store i8 %prev_score_out_7, i8* %score1_addr_2, align 1


 <State 22>: 2.71ns
ST_22: empty_9 [1/1] 0.00ns
._crit_edge.i_ifconv:1  %empty_9 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 100, i64 100, i64 100) nounwind

ST_22: stg_252 [1/1] 0.00ns
._crit_edge.i_ifconv:2  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str1) nounwind

ST_22: tmp_31 [1/1] 0.00ns
._crit_edge.i_ifconv:3  %tmp_31 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str1) nounwind

ST_22: stg_254 [1/1] 0.00ns
._crit_edge.i_ifconv:4  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind

ST_22: orig1_addr_1 [1/1] 0.00ns
._crit_edge.i_ifconv:63  %orig1_addr_1 = getelementptr inbounds [100 x i20]* %orig1, i64 0, i64 %tmp_16

ST_22: stg_256 [1/1] 2.71ns
._crit_edge.i_ifconv:64  store i20 %prev_orig_out_11, i20* %orig1_addr_1, align 4

ST_22: empty_10 [1/1] 0.00ns
._crit_edge.i_ifconv:65  %empty_10 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str1, i32 %tmp_31) nounwind

ST_22: stg_258 [1/1] 0.00ns
._crit_edge.i_ifconv:67  br label %3


 <State 23>: 3.89ns
ST_23: max_score_4 [1/1] 0.00ns
doRow.exit:0  %max_score_4 = sext i8 %score_out2 to i32

ST_23: tmp_10 [1/1] 2.52ns
doRow.exit:1  %tmp_10 = icmp sgt i32 %max_score_4, %max_score_1

ST_23: max_orig_2 [1/1] 1.37ns
doRow.exit:2  %max_orig_2 = select i1 %tmp_10, i20 %prev_orig_out_14, i20 %max_orig_1

ST_23: max_score_2 [1/1] 1.37ns
doRow.exit:3  %max_score_2 = select i1 %tmp_10, i32 %max_score_4, i32 %max_score_1

ST_23: empty_11 [1/1] 0.00ns
doRow.exit:4  %empty_11 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str6, i32 %tmp_2) nounwind

ST_23: i [1/1] 2.08ns
doRow.exit:5  %i = add i20 %prev_orig_out_1, 2

ST_23: stg_265 [1/1] 0.00ns
doRow.exit:6  br label %1



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
