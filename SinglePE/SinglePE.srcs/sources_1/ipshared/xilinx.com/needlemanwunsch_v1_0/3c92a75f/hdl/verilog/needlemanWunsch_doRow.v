// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.2
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module needlemanWunsch_doRow (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        i,
        read_r_address0,
        read_r_ce0,
        read_r_q0,
        ref_genome,
        score_in_address0,
        score_in_ce0,
        score_in_q0,
        score_out_address0,
        score_out_ce0,
        score_out_we0,
        score_out_d0,
        orig_in_address0,
        orig_in_ce0,
        orig_in_q0,
        orig_out_address0,
        orig_out_ce0,
        orig_out_we0,
        orig_out_d0
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_pp0_stg0_fsm_2 = 4'b100;
parameter    ap_ST_st11_fsm_3 = 4'b1000;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv7_1 = 7'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv20_FFFFF = 20'b11111111111111111111;
parameter    ap_const_lv20_1 = 20'b1;
parameter    ap_const_lv7_65 = 7'b1100101;
parameter    ap_const_lv7_7F = 7'b1111111;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv3_1 = 3'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv4_7 = 4'b111;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv20_0 = 20'b00000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [19:0] i;
output  [4:0] read_r_address0;
output   read_r_ce0;
input  [7:0] read_r_q0;
input  [1:0] ref_genome;
output  [6:0] score_in_address0;
output   score_in_ce0;
input  [7:0] score_in_q0;
output  [6:0] score_out_address0;
output   score_out_ce0;
output   score_out_we0;
output  [7:0] score_out_d0;
output  [6:0] orig_in_address0;
output   orig_in_ce0;
input  [19:0] orig_in_q0;
output  [6:0] orig_out_address0;
output   orig_out_ce0;
output   orig_out_we0;
output  [19:0] orig_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg read_r_ce0;
reg score_in_ce0;
reg score_out_ce0;
reg score_out_we0;
reg orig_in_ce0;
reg orig_out_ce0;
reg orig_out_we0;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm = 4'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_22;
reg   [6:0] j_reg_148;
reg   [7:0] left_reg_159;
reg   [19:0] prev_orig_out_5_reg_171;
reg   [7:0] prev_score_in_reg_181;
reg   [19:0] prev_orig_out_6_reg_193;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_83;
wire  signed [19:0] prev_orig_out_4_fu_203_p2;
wire   [0:0] tmp_2_fu_208_p2;
reg   [0:0] tmp_2_reg_480;
wire   [0:0] exitcond_fu_213_p2;
reg   [0:0] exitcond_reg_486;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_2;
reg    ap_sig_bdd_96;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg    ap_reg_ppiten_pp0_it3 = 1'b0;
reg    ap_reg_ppiten_pp0_it4 = 1'b0;
reg    ap_reg_ppiten_pp0_it5 = 1'b0;
reg    ap_reg_ppiten_pp0_it6 = 1'b0;
reg    ap_reg_ppiten_pp0_it7 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond_reg_486_pp0_it1;
reg   [0:0] ap_reg_ppstg_exitcond_reg_486_pp0_it2;
reg   [0:0] ap_reg_ppstg_exitcond_reg_486_pp0_it3;
reg   [0:0] ap_reg_ppstg_exitcond_reg_486_pp0_it4;
reg   [0:0] ap_reg_ppstg_exitcond_reg_486_pp0_it5;
reg   [0:0] ap_reg_ppstg_exitcond_reg_486_pp0_it6;
wire   [7:0] tmp_3_fu_223_p2;
reg   [7:0] tmp_3_reg_490;
reg   [7:0] ap_reg_ppstg_tmp_3_reg_490_pp0_it1;
reg   [7:0] ap_reg_ppstg_tmp_3_reg_490_pp0_it2;
wire  signed [6:0] tmp_4_fu_229_p2;
reg  signed [6:0] tmp_4_reg_495;
reg  signed [6:0] ap_reg_ppstg_tmp_4_reg_495_pp0_it1;
wire   [1:0] tmp_fu_250_p1;
reg   [1:0] tmp_reg_505;
wire   [6:0] j_1_fu_254_p2;
wire   [3:0] tmp_47_fu_315_p3;
reg   [3:0] tmp_47_reg_515;
wire   [7:0] tmp_48_fu_323_p3;
reg   [7:0] tmp_48_reg_520;
wire   [3:0] tmp_49_fu_331_p3;
reg   [3:0] tmp_49_reg_525;
wire   [63:0] tmp_5_fu_339_p1;
reg   [63:0] tmp_5_reg_530;
reg   [63:0] ap_reg_ppstg_tmp_5_reg_530_pp0_it3;
reg   [63:0] ap_reg_ppstg_tmp_5_reg_530_pp0_it4;
reg   [63:0] ap_reg_ppstg_tmp_5_reg_530_pp0_it5;
reg   [63:0] ap_reg_ppstg_tmp_5_reg_530_pp0_it6;
wire   [1:0] tmp_56_fu_372_p1;
reg   [1:0] tmp_56_reg_542;
wire   [7:0] cur_score_in_fu_376_p3;
reg   [7:0] cur_score_in_reg_547;
reg   [7:0] ap_reg_ppstg_cur_score_in_reg_547_pp0_it4;
wire   [0:0] tmp_7_fu_382_p2;
reg   [0:0] tmp_7_reg_553;
wire   [7:0] prev_score_out_3_fu_393_p2;
reg   [7:0] prev_score_out_3_reg_563;
reg   [7:0] ap_reg_ppstg_prev_score_out_3_reg_563_pp0_it5;
wire  signed [7:0] up_score_fu_399_p2;
reg  signed [7:0] up_score_reg_570;
wire   [19:0] cur_orig_in_fu_404_p3;
reg   [19:0] cur_orig_in_reg_577;
reg   [19:0] ap_reg_ppstg_cur_orig_in_reg_577_pp0_it6;
wire   [0:0] or_cond_fu_426_p2;
reg   [0:0] or_cond_reg_583;
wire   [0:0] tmp_12_fu_432_p2;
reg   [0:0] tmp_12_reg_589;
wire   [7:0] prev_score_out_1_fu_437_p3;
reg   [7:0] prev_score_out_1_reg_594;
wire   [7:0] prev_score_out_2_fu_450_p3;
wire   [19:0] prev_orig_out_2_fu_456_p3;
reg   [19:0] prev_orig_out_2_reg_604;
reg   [7:0] left_phi_fu_163_p4;
reg   [19:0] prev_orig_out_5_phi_fu_174_p4;
reg   [7:0] prev_score_in_phi_fu_185_p4;
reg   [19:0] prev_orig_out_6_phi_fu_196_p4;
wire   [63:0] tmp_9_fu_245_p1;
wire   [7:0] j_cast_fu_219_p1;
wire   [4:0] tmp_8_fu_235_p4;
wire   [2:0] tmp_1_fu_260_p3;
wire   [2:0] tmp_6_fu_267_p2;
wire   [3:0] tmp_41_fu_279_p1;
wire   [3:0] tmp_42_fu_283_p1;
wire   [0:0] tmp_40_fu_273_p2;
wire   [3:0] tmp_44_fu_297_p2;
wire   [3:0] tmp_46_fu_309_p2;
reg   [7:0] tmp_43_fu_287_p4;
wire   [3:0] tmp_45_fu_303_p2;
wire   [3:0] tmp_50_fu_343_p2;
wire   [7:0] tmp_51_fu_348_p1;
wire   [7:0] tmp_52_fu_351_p1;
wire   [7:0] tmp_53_fu_355_p2;
wire   [7:0] tmp_54_fu_360_p2;
wire   [7:0] tmp_55_fu_366_p2;
wire   [7:0] diag_score_0_v_cast_cast_fu_386_p3;
wire  signed [7:0] prev_score_out_4_fu_411_p2;
wire   [0:0] tmp_10_fu_417_p2;
wire   [0:0] tmp_11_fu_422_p2;
wire   [19:0] prev_orig_out_1_fu_444_p3;
reg    ap_sig_cseq_ST_st11_fsm_3;
reg    ap_sig_bdd_399;
reg   [3:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(exitcond_fu_213_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_fu_213_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & ~(exitcond_fu_213_p2 == ap_const_lv1_0)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
    end
end

/// ap_reg_ppiten_pp0_it3 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it3
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
    end
end

/// ap_reg_ppiten_pp0_it4 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it4
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
    end
end

/// ap_reg_ppiten_pp0_it5 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it5
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
    end
end

/// ap_reg_ppiten_pp0_it6 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it6
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
    end
end

/// ap_reg_ppiten_pp0_it7 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it7
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
    end else begin
        ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & (exitcond_fu_213_p2 == ap_const_lv1_0))) begin
        j_reg_148 <= j_1_fu_254_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        j_reg_148 <= ap_const_lv7_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_reg_486_pp0_it5 == ap_const_lv1_0))) begin
        left_reg_159 <= prev_score_out_2_fu_450_p3;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        left_reg_159 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond_reg_486_pp0_it6 == ap_const_lv1_0))) begin
        prev_orig_out_5_reg_171 <= prev_orig_out_2_reg_604;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        prev_orig_out_5_reg_171 <= prev_orig_out_4_fu_203_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond_reg_486_pp0_it6 == ap_const_lv1_0))) begin
        prev_orig_out_6_reg_193 <= ap_reg_ppstg_cur_orig_in_reg_577_pp0_it6;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        prev_orig_out_6_reg_193 <= prev_orig_out_4_fu_203_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_reg_486_pp0_it4 == ap_const_lv1_0))) begin
        prev_score_in_reg_181 <= ap_reg_ppstg_cur_score_in_reg_547_pp0_it4;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        prev_score_in_reg_181 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_true == ap_true)) begin
        ap_reg_ppstg_cur_orig_in_reg_577_pp0_it6 <= cur_orig_in_reg_577;
        ap_reg_ppstg_cur_score_in_reg_547_pp0_it4 <= cur_score_in_reg_547;
        ap_reg_ppstg_exitcond_reg_486_pp0_it2 <= ap_reg_ppstg_exitcond_reg_486_pp0_it1;
        ap_reg_ppstg_exitcond_reg_486_pp0_it3 <= ap_reg_ppstg_exitcond_reg_486_pp0_it2;
        ap_reg_ppstg_exitcond_reg_486_pp0_it4 <= ap_reg_ppstg_exitcond_reg_486_pp0_it3;
        ap_reg_ppstg_exitcond_reg_486_pp0_it5 <= ap_reg_ppstg_exitcond_reg_486_pp0_it4;
        ap_reg_ppstg_exitcond_reg_486_pp0_it6 <= ap_reg_ppstg_exitcond_reg_486_pp0_it5;
        ap_reg_ppstg_prev_score_out_3_reg_563_pp0_it5 <= prev_score_out_3_reg_563;
        ap_reg_ppstg_tmp_3_reg_490_pp0_it2 <= ap_reg_ppstg_tmp_3_reg_490_pp0_it1;
        ap_reg_ppstg_tmp_5_reg_530_pp0_it3[6 : 0] <= tmp_5_reg_530[6 : 0];
        ap_reg_ppstg_tmp_5_reg_530_pp0_it4[6 : 0] <= ap_reg_ppstg_tmp_5_reg_530_pp0_it3[6 : 0];
        ap_reg_ppstg_tmp_5_reg_530_pp0_it5[6 : 0] <= ap_reg_ppstg_tmp_5_reg_530_pp0_it4[6 : 0];
        ap_reg_ppstg_tmp_5_reg_530_pp0_it6[6 : 0] <= ap_reg_ppstg_tmp_5_reg_530_pp0_it5[6 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2)) begin
        ap_reg_ppstg_exitcond_reg_486_pp0_it1 <= exitcond_reg_486;
        ap_reg_ppstg_tmp_3_reg_490_pp0_it1 <= tmp_3_reg_490;
        ap_reg_ppstg_tmp_4_reg_495_pp0_it1 <= tmp_4_reg_495;
        exitcond_reg_486 <= exitcond_fu_213_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_reg_486_pp0_it4 == ap_const_lv1_0))) begin
        cur_orig_in_reg_577 <= cur_orig_in_fu_404_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it3) & (ap_reg_ppstg_exitcond_reg_486_pp0_it2 == ap_const_lv1_0))) begin
        cur_score_in_reg_547 <= cur_score_in_fu_376_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_reg_486_pp0_it4 == ap_const_lv1_0)) begin
        or_cond_reg_583 <= or_cond_fu_426_p2;
        prev_score_out_1_reg_594 <= prev_score_out_1_fu_437_p3;
        tmp_12_reg_589 <= tmp_12_fu_432_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_reg_486_pp0_it5 == ap_const_lv1_0))) begin
        prev_orig_out_2_reg_604 <= prev_orig_out_2_fu_456_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_reg_486_pp0_it3 == ap_const_lv1_0)) begin
        prev_score_out_3_reg_563 <= prev_score_out_3_fu_393_p2;
        up_score_reg_570 <= up_score_fu_399_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        tmp_2_reg_480 <= tmp_2_fu_208_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_fu_213_p2 == ap_const_lv1_0) & ~(tmp_2_reg_480 == ap_const_lv1_0))) begin
        tmp_3_reg_490 <= tmp_3_fu_223_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_reg_486 == ap_const_lv1_0))) begin
        tmp_47_reg_515[3 : 1] <= tmp_47_fu_315_p3[3 : 1];
        tmp_48_reg_520 <= tmp_48_fu_323_p3;
        tmp_49_reg_525 <= tmp_49_fu_331_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (exitcond_fu_213_p2 == ap_const_lv1_0))) begin
        tmp_4_reg_495 <= tmp_4_fu_229_p2;
        tmp_reg_505 <= tmp_fu_250_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_reg_486_pp0_it1 == ap_const_lv1_0)) begin
        tmp_56_reg_542 <= tmp_56_fu_372_p1;
        tmp_5_reg_530[6 : 0] <= tmp_5_fu_339_p1[6 : 0];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_reg_ppstg_exitcond_reg_486_pp0_it2 == ap_const_lv1_0)) begin
        tmp_7_reg_553 <= tmp_7_fu_382_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st11_fsm_3)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_3))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st11_fsm_3)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_3)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_2 assign process. ///
always @ (ap_sig_bdd_96)
begin
    if (ap_sig_bdd_96) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_3 assign process. ///
always @ (ap_sig_bdd_399)
begin
    if (ap_sig_bdd_399) begin
        ap_sig_cseq_ST_st11_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_22)
begin
    if (ap_sig_bdd_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_83)
begin
    if (ap_sig_bdd_83) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// left_phi_fu_163_p4 assign process. ///
always @ (left_reg_159 or ap_reg_ppiten_pp0_it6 or ap_reg_ppstg_exitcond_reg_486_pp0_it5 or prev_score_out_2_fu_450_p3)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_reg_486_pp0_it5 == ap_const_lv1_0))) begin
        left_phi_fu_163_p4 = prev_score_out_2_fu_450_p3;
    end else begin
        left_phi_fu_163_p4 = left_reg_159;
    end
end

/// orig_in_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it4)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it4)) begin
        orig_in_ce0 = ap_const_logic_1;
    end else begin
        orig_in_ce0 = ap_const_logic_0;
    end
end

/// orig_out_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it7)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it7)) begin
        orig_out_ce0 = ap_const_logic_1;
    end else begin
        orig_out_ce0 = ap_const_logic_0;
    end
end

/// orig_out_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it7 or ap_reg_ppstg_exitcond_reg_486_pp0_it6)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond_reg_486_pp0_it6 == ap_const_lv1_0))) begin
        orig_out_we0 = ap_const_logic_1;
    end else begin
        orig_out_we0 = ap_const_logic_0;
    end
end

/// prev_orig_out_5_phi_fu_174_p4 assign process. ///
always @ (prev_orig_out_5_reg_171 or ap_reg_ppiten_pp0_it7 or ap_reg_ppstg_exitcond_reg_486_pp0_it6 or prev_orig_out_2_reg_604)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond_reg_486_pp0_it6 == ap_const_lv1_0))) begin
        prev_orig_out_5_phi_fu_174_p4 = prev_orig_out_2_reg_604;
    end else begin
        prev_orig_out_5_phi_fu_174_p4 = prev_orig_out_5_reg_171;
    end
end

/// prev_orig_out_6_phi_fu_196_p4 assign process. ///
always @ (prev_orig_out_6_reg_193 or ap_reg_ppiten_pp0_it7 or ap_reg_ppstg_exitcond_reg_486_pp0_it6 or ap_reg_ppstg_cur_orig_in_reg_577_pp0_it6)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & (ap_reg_ppstg_exitcond_reg_486_pp0_it6 == ap_const_lv1_0))) begin
        prev_orig_out_6_phi_fu_196_p4 = ap_reg_ppstg_cur_orig_in_reg_577_pp0_it6;
    end else begin
        prev_orig_out_6_phi_fu_196_p4 = prev_orig_out_6_reg_193;
    end
end

/// prev_score_in_phi_fu_185_p4 assign process. ///
always @ (prev_score_in_reg_181 or ap_reg_ppiten_pp0_it5 or ap_reg_ppstg_exitcond_reg_486_pp0_it4 or ap_reg_ppstg_cur_score_in_reg_547_pp0_it4)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it5) & (ap_reg_ppstg_exitcond_reg_486_pp0_it4 == ap_const_lv1_0))) begin
        prev_score_in_phi_fu_185_p4 = ap_reg_ppstg_cur_score_in_reg_547_pp0_it4;
    end else begin
        prev_score_in_phi_fu_185_p4 = prev_score_in_reg_181;
    end
end

/// read_r_ce0 assign process. ///
always @ (ap_sig_cseq_ST_pp0_stg0_fsm_2 or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_2) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        read_r_ce0 = ap_const_logic_1;
    end else begin
        read_r_ce0 = ap_const_logic_0;
    end
end

/// score_in_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it2)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) begin
        score_in_ce0 = ap_const_logic_1;
    end else begin
        score_in_ce0 = ap_const_logic_0;
    end
end

/// score_out_ce0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6)
begin
    if ((ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) begin
        score_out_ce0 = ap_const_logic_1;
    end else begin
        score_out_ce0 = ap_const_logic_0;
    end
end

/// score_out_we0 assign process. ///
always @ (ap_reg_ppiten_pp0_it6 or ap_reg_ppstg_exitcond_reg_486_pp0_it5)
begin
    if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it6) & (ap_reg_ppstg_exitcond_reg_486_pp0_it5 == ap_const_lv1_0))) begin
        score_out_we0 = ap_const_logic_1;
    end else begin
        score_out_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_213_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_reg_ppiten_pp0_it6 or ap_reg_ppiten_pp0_it7)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
        end
        ap_ST_pp0_stg0_fsm_2 : 
        begin
            if ((~((ap_const_logic_1 == ap_reg_ppiten_pp0_it7) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it6)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_213_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_2;
            end else if (((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(exitcond_fu_213_p2 == ap_const_lv1_0) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1))) begin
                ap_NS_fsm = ap_ST_st11_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_3;
            end
        end
        ap_ST_st11_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_22 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_22 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_399 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_399 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_83 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_83 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_96 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_96 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end
assign cur_orig_in_fu_404_p3 = ((tmp_2_reg_480[0:0]===1'b1)? ap_const_lv20_0: orig_in_q0);
assign cur_score_in_fu_376_p3 = ((tmp_2_reg_480[0:0]===1'b1)? ap_reg_ppstg_tmp_3_reg_490_pp0_it2: score_in_q0);
assign diag_score_0_v_cast_cast_fu_386_p3 = ((tmp_7_reg_553[0:0]===1'b1)? ap_const_lv8_1: ap_const_lv8_FF);
assign exitcond_fu_213_p2 = (j_reg_148 == ap_const_lv7_65? 1'b1: 1'b0);
assign j_1_fu_254_p2 = (ap_const_lv7_1 + j_reg_148);
assign j_cast_fu_219_p1 = j_reg_148;
assign or_cond_fu_426_p2 = (tmp_10_fu_417_p2 | tmp_11_fu_422_p2);
assign orig_in_address0 = ap_reg_ppstg_tmp_5_reg_530_pp0_it3;
assign orig_out_address0 = ap_reg_ppstg_tmp_5_reg_530_pp0_it6;
assign orig_out_d0 = prev_orig_out_2_reg_604;
assign prev_orig_out_1_fu_444_p3 = ((tmp_12_reg_589[0:0]===1'b1)? cur_orig_in_reg_577: prev_orig_out_5_phi_fu_174_p4);
assign prev_orig_out_2_fu_456_p3 = ((or_cond_reg_583[0:0]===1'b1)? prev_orig_out_1_fu_444_p3: prev_orig_out_6_phi_fu_196_p4);
assign prev_orig_out_4_fu_203_p2 = ($signed(i) + $signed(ap_const_lv20_FFFFF));
assign prev_score_out_1_fu_437_p3 = ((tmp_12_fu_432_p2[0:0]===1'b1)? up_score_reg_570: prev_score_out_4_fu_411_p2);
assign prev_score_out_2_fu_450_p3 = ((or_cond_reg_583[0:0]===1'b1)? prev_score_out_1_reg_594: ap_reg_ppstg_prev_score_out_3_reg_563_pp0_it5);
assign prev_score_out_3_fu_393_p2 = (diag_score_0_v_cast_cast_fu_386_p3 + prev_score_in_phi_fu_185_p4);
assign prev_score_out_4_fu_411_p2 = ($signed(ap_const_lv8_FF) + $signed(left_phi_fu_163_p4));
assign read_r_address0 = tmp_9_fu_245_p1;
assign score_in_address0 = tmp_5_fu_339_p1;
assign score_out_address0 = ap_reg_ppstg_tmp_5_reg_530_pp0_it5;
assign score_out_d0 = ((or_cond_reg_583[0:0]===1'b1)? prev_score_out_1_reg_594: ap_reg_ppstg_prev_score_out_3_reg_563_pp0_it5);
assign tmp_10_fu_417_p2 = ($signed(prev_score_out_3_reg_563) < $signed(prev_score_out_4_fu_411_p2)? 1'b1: 1'b0);
assign tmp_11_fu_422_p2 = ($signed(prev_score_out_3_reg_563) < $signed(up_score_reg_570)? 1'b1: 1'b0);
assign tmp_12_fu_432_p2 = ($signed(prev_score_out_4_fu_411_p2) < $signed(up_score_reg_570)? 1'b1: 1'b0);
assign tmp_1_fu_260_p3 = {{tmp_reg_505}, {ap_const_lv1_0}};
assign tmp_2_fu_208_p2 = (i == ap_const_lv20_1? 1'b1: 1'b0);
assign tmp_3_fu_223_p2 = (ap_const_lv8_0 - j_cast_fu_219_p1);
assign tmp_40_fu_273_p2 = (tmp_1_fu_260_p3 > tmp_6_fu_267_p2? 1'b1: 1'b0);
assign tmp_41_fu_279_p1 = tmp_1_fu_260_p3;
assign tmp_42_fu_283_p1 = tmp_6_fu_267_p2;

integer ap_tvar_int_0;

always @ (read_r_q0) begin
    for (ap_tvar_int_0 = 8 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > ap_const_lv32_7 - ap_const_lv32_0) begin
            tmp_43_fu_287_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_43_fu_287_p4[ap_tvar_int_0] = read_r_q0[ap_const_lv32_7 - ap_tvar_int_0];
        end
    end
end


assign tmp_44_fu_297_p2 = (tmp_41_fu_279_p1 - tmp_42_fu_283_p1);
assign tmp_45_fu_303_p2 = (tmp_41_fu_279_p1 ^ ap_const_lv4_7);
assign tmp_46_fu_309_p2 = (tmp_42_fu_283_p1 - tmp_41_fu_279_p1);
assign tmp_47_fu_315_p3 = ((tmp_40_fu_273_p2[0:0]===1'b1)? tmp_44_fu_297_p2: tmp_46_fu_309_p2);
assign tmp_48_fu_323_p3 = ((tmp_40_fu_273_p2[0:0]===1'b1)? tmp_43_fu_287_p4: read_r_q0);
assign tmp_49_fu_331_p3 = ((tmp_40_fu_273_p2[0:0]===1'b1)? tmp_45_fu_303_p2: tmp_41_fu_279_p1);
assign tmp_4_fu_229_p2 = ($signed(ap_const_lv7_7F) + $signed(j_reg_148));
assign tmp_50_fu_343_p2 = (ap_const_lv4_7 - tmp_47_reg_515);
assign tmp_51_fu_348_p1 = tmp_49_reg_525;
assign tmp_52_fu_351_p1 = tmp_50_fu_343_p2;
assign tmp_53_fu_355_p2 = tmp_48_reg_520 >> tmp_51_fu_348_p1;
assign tmp_54_fu_360_p2 = ap_const_lv8_FF >> tmp_52_fu_351_p1;
assign tmp_55_fu_366_p2 = (tmp_53_fu_355_p2 & tmp_54_fu_360_p2);
assign tmp_56_fu_372_p1 = tmp_55_fu_366_p2[1:0];
assign tmp_5_fu_339_p1 = $unsigned(ap_reg_ppstg_tmp_4_reg_495_pp0_it1);
assign tmp_6_fu_267_p2 = (tmp_1_fu_260_p3 | ap_const_lv3_1);
assign tmp_7_fu_382_p2 = (tmp_56_reg_542 == ref_genome? 1'b1: 1'b0);
assign tmp_8_fu_235_p4 = {{tmp_4_fu_229_p2[ap_const_lv32_6 : ap_const_lv32_2]}};
assign tmp_9_fu_245_p1 = tmp_8_fu_235_p4;
assign tmp_fu_250_p1 = tmp_4_fu_229_p2[1:0];
assign up_score_fu_399_p2 = ($signed(ap_const_lv8_FF) + $signed(cur_score_in_reg_547));
always @ (posedge ap_clk)
begin
    tmp_47_reg_515[0] <= 1'b1;
    tmp_5_reg_530[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_5_reg_530_pp0_it3[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_5_reg_530_pp0_it4[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_5_reg_530_pp0_it5[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    ap_reg_ppstg_tmp_5_reg_530_pp0_it6[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end



endmodule //needlemanWunsch_doRow

